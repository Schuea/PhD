      PROGRAM MUCARLO         
C     THE SUBROUTINES ARE ARRANGED IN ALPHEBETICAL ORDER,
C     EXCEPT FOR "FINAL_FOCUS" AND "ACCEL", WHICH ARE LOCATED
C     AT THE BACK OF THE DECK
C
C  UNITS ARE CENTIMETERS IN THE TRANSVERSE DIRECTION, METERS IN THE
C  BEAM DIRECTION, AND GEV
C
C
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/DTIME/TBEAM,TMU,TDMU,S
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/LIST/LZ(10000),XX(10000),
     1 YY(10000),XXPRIME(10000),YYPRIME(10000),PP(10000)
      COMMON/LIST1/XX0(10000),XX0PRIME(10000),XXAXIS(10000),
     1 XXAXISP(10000)
      DIMENSION DS(10000),DT(10000),DSMU(10000),ENMU(10000),
     1BETAMU(10000),VMU(10000),DTMU(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/BUFFER/PBI(100),PBF(100),XF(100),YF(100),ICH(100)
      COMMON/BL/BEAM_LINE_LABEL(10000)
      CHARACTER*8 BEAM_LINE_LABEL
      COMMON/MUDIST/P_THETA_DIST(750,70)
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
      COMMON/IFLAG/IRUN,POSITRON,BH
      LOGICAL IRUN,POSITRON,BH
C COMMON/THETA/THETAMAX(750)
      LOGICAL THETABH
      COMMON/MFLAG/NSPECT
      COMMON/CDUMP/NDUMP,MUPLT,MUPLD,MUMIT,MUMID,MUBCAL,MUECAL,NIP,NPOS
      COMMON/POS/LPOS(100,3000),XPOS(100,3000),YPOS(100,3000),
     1PPOS(100,3000),MAXL
      COMMON/XTUNNEL/D0,D1,RTUNNEL,XBEAM,XREF,XWALLLT(10000),
     1XOFFSET(10000),YOFFSET,YFLOOR,XFLOOR,XWALLRT(10000),TWALL,
     2XWALLLT1(10000),XWALLRT1(10000),AXISLE(10000),AXISD(10000)
      COMMON/BEAM/EBEAM
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
      COMMON/TEMP/LS,LPOL,LC,QUAD_SPACING,QUAD_LENGTH,ACCEL_LENGTH,LQ
      COMMON/WEIGHT/WEIMU
      COMMON/MP/PMIN
      COMMON/SWITCH/ISWPEN,ISWSTR,ISW_WG,ISW_S,ISW_Q,ISW_SQ,ISW_X,ISW_Y,
     1       ISW_QT
      COMMON/USER/PMUIN,THMUIN,YPRIM0
C      INTEGER seed      
      DATA C/299792460./
      DATA XMU/0.105658/
C     DATA XMU/0.0/
C     REAL*4 RAN9
C     REAL*4 TYMST,TYMOUT,TYMNOW,TYMTRK
      REAL*8 DS,DT
      REAL*8 TBEAM,TMU,TDMU,S
      REAL*8 DSMU,ENMU,BETAMU,VMU,DTMU
      REAL*8 P_THETA_DIST
      LOGICAL LFINISH
      LOGICAL NSPECT
C
C IN THIS BEAM THE LINAC ENDS 2500 METERS FROM THE IP
C 17 SOURCES ARE INCLUDED, 10 IN THE LINAC AND 7 IN THE FF
C
      CHARACTER*8 SOURCE_LABEL(17)/
     * 'DUMMY   ','DUMMY   ','DUMMY   ','DUMMY   ','DUMMY   ',
     1 'DUMMY   ','DUMMY   ','L8      ','L9      ','DUMMY   ',
     2 'DUMMY   ','DUMMY   ','DUMMY   ','DUMMY   ','DUMMY   ',
     3 ' SP4    ','SP2     '/
      INTEGER SOURCE_INDEX(17)/0,       0,    0,    0,    0,
     1    0,  0,  2886, 2581, 1323,
C                               SP4   SP2
     2 1,   1,   1,      1,   1,1332,1508/
C
C ENERGIES FROM THE DIFFERENT COLLIMATOR SOURCES
      DIMENSION E(17)
C      DATA E/0.,0.,0.,0.,0.,0.,0.,0.,  0.,  0.,  0.,  0.,
C     1   0., 0.,  0.,250.,250./
      DATA E/0.,0.,0.,0.,0.,0.,0.,0.,  0.,  0.,  0.,  0.,
     1   0., 0.,  0.,125.,125./
C WEIGHTS FOR NUMBER OF STARTING MUONS = MUONS/POSITRON * FRRACTION HITTING COLLIMATOR
      DIMENSION F(17)
      DATA F/0.,0.,0.,0.,0.,0.,0.,0.,0.0000,0.000,0.000,0.000,
     1 0.000,0.000,0.00,0.337,0.654/
C     MUON SPOILER TOROIDS CAN BE INSERTED THROUGH THE COMMON BLOCK
C     /CTOROID/:
C
C       TOROID_POLARITY: +1. IS FOCUSING FOR THE PRIMARY CHARGE
C
      COMMON/CTOROID/LTOROID(20),ITOROID_TYPE(20),ITOROID_BEGIN(20),
     1 ITOROID_LENGTH(20),TOROIDX(20),TOROID_POLARITY(20),NTOR
      LOGICAL LTOROID
      CHARACTER*20 FILE/'   011418p_06rl.f '/
      OPEN(UNIT=6,FILE='p_06rl_5spoilers_wall_mucarlo_1e9.output')
      OPEN(UNIT=95,FILE='p_06rl_5spoilers_wall_mucarlo_1e9.out95')
      PRINT 1111, TYMINI
 1111 FORMAT(T3,' TYMINI=',G15.5,' SEC (START OF MAIN PROGRAM)',/)
C
C     NORTH AND SOUTH FLAGS INDICATE DIFFERENT TUNNELS AND
C     TOROID LAYOUTS.  POSITRON FLAG INDICATES RUN WITH E+E-
C     GOING TO MU+MU-.  TO MAKE THE POSITRON CASE AS
C     SIMPLE AS POSSIBLE, POSITRONS WILL BE TREATED AS IF THEY HAVE
C     NEGATIVE CHARGE
 	  jarg = 86413
	  call srand(jarg)
C
       RANST=RAND()
      PRINT 1384, RANST
1384  FORMAT(' RANST=',F20.15)
      WEIMU=0.
      NTOR=0
C     DEFINE THE VARIABLES
C     PMIN SHOULD ALWAYS BE GREATER THAN OR EQUAL TO 1.0
C     SOURCES RANGE FROM 16 TO 17. 16 is SP4, 17 is SP2
      ISOURCE_START = 16
      ISOURCE_STOP =  17
      PMIN=1.0      
C     MOVED NEXT TWO STATEMENTs TO LINE 796 FOR MULTIPLE SOURCE RUNS
C      EBEAM=  E(ISOURCE_START)
C      NEVENT= 20000000*F(ISOURCE_START)
C     NDUMP IS THE NUMBER OF TRAJECTORIES THAT ARE PRINTED, UP TO 100      
      NDUMP =    0
      IRUN= .TRUE.
      POSITRON=.TRUE.
      BH=.TRUE.
C     NORTH = FALSE MEANS THE SOUTH TUNNEL AND SOUTH SPOILERS ARE USED  
      NORTH = .FALSE.
      IPRINT= 0
      LTUNNEL = .TRUE.
      LFINISH = .FALSE.
C  ISTEP IS THE STEP SIZE IN ALL ELEMENTS EXCEPT DRIFTS, KSTEP
C  IS THE STEP SIZE WHEN THE MUON IS OUTSIDE THE TUNNEL.
C  UNITS ARE METERS.
      ISTEP=1
      KSTEP=1
      ACCEL_LENGTH=10000.
C...+....1....+....2....+....3....+....4....+....5....+....6....+....7."
C DEFINE TUNNEL PARAMETERS AND CALCULATE BOUNDARIES
C SEE PICTURE IN MUCARLO FOLDER
C THE NORTH TUNNEL IS ROUND, THE SOUTH TUNNEL IS SQUARE
C
C NORTH TUNNEL PARAMETERS
C
C YOFFSET IS THE VERT. DIST. FROM BEAM AXIS TO TUNNEL CTR.
C IT IS USED IN THE ROUTINE TO CHECK IF THE MUON IS OUTSIDE
C THE TUNNEL
C
C XFLOOR IS WIDTH OF CONCRETE FLOOR
C YFLOOR IS BEAM HEIGHT ABOVE CONCRETE FLOOR
C
C XREF IS THE HORIZ. DISTANCE FROM THE TUNNEL WALL TO THE BEAM AXIS
C AT THE START OF THE BEAM LINE. IT IS MEASURED AT THE WIDEST
C PART OF THE TUNNEL, I.E. AT THE TUNNEL DIAMETER
C
C DO IS THE VERTICAL DISTANCE FROM THE FLOOR TO THE TUNNEL CTR.
C D1 IS THE VERTICAL DISTANCE FROM THE BEAM TO THE TUNNEL CTR.
C XBEAM IS THE DISTANCE ACROSS THE TUNNEL AT BEAM HEIGHT
C XSIDE DEFINES WHETHER THE BEAM LINE IS NEAR THE LEFT WALL OR RIGHT WALL
C XSIDE = +1 MEANS LEFT SIDE, XSIDE = -1. MEANS RIGHT SIDE
C TWALL IS THE THICKNESS OF THE CONCRETE WALL, OUTSIDE THAT IS
C SANDSTONE
C
C FOR THE 14 X 14 LAYOUT, NORTH = .TRUE.
      IF(NORTH) THEN
        XSIDE=  1.
        RTUNNEL=250.0
        XFLOOR=300.
        YFLOOR=75.
        XREF=200.
C FOR THE SINGLE TUNNEL TO A PUSH-PULL HALL, XREFRT IS NOT USED
        XREFRT=100.
        TWALL=30.
        D0=0.5*SQRT(4*RTUNNEL**2-XFLOOR**2)
        D1=D0-YFLOOR
        XBEAM=2*SQRT(RTUNNEL**2-D1**2)
        YOFFSET=D1
      ELSE
C SOUTH TUNNEL PARAMETERS - SQUARE TUNNEL
        XSIDE=  1.
        RTUNNEL=250.0
        XFLOOR=400.0
        YFLOOR=110.
        XREF=100.
        TWALL=30.
        D0=RTUNNEL
        D1=D0-YFLOOR
        XBEAM=2*RTUNNEL
        YOFFSET=D1
      END IF
C THETA0 IS THE LINAC ANGLE WRT THE X-AXIS
C THETA1 IS THE FIRST BIG BEND TOWARD IR2 WRT THE X-AXIS
C THETA2 IS THE ECOLL BEND, BS1
C THETA3 IS B5
C THETA4 IS B2
C THETA5 IS B1
C THETA6 IS THE LINAC DUMP LINE BEND
C THETAHE,THETALE, AND THETAD ARE ANGLES IN TUNNEL
C COORDINATE SYSTEM
C DTHETA1-6 ARE THE BENDS IN ONE METER
C DX1-6 ARE THE CHANGES (CM) IN HORIZONTAL POSITION IN ONE
C METER OF BEND
      THETA0= 0.00
      THETA1=0.014
      THETA2=0.00249529
      THETA3=-0.00120405
      THETA4=-0.001047
      THETA5=-0.000244
      THETA6=-0.00934
      DTHETA0=THETA0/2200.
      DTHETA1=THETA1/205.
      DTHETA2=THETA2/397.8
      DTHETA3=THETA3/125.41
      DTHETA4=THETA4/131.39
      DTHETA5=THETA5/65.3
      DTHETA6=THETA6/150.
      DX0=0.5*DTHETA0*100.
      DX1=0.5*DTHETA1*100.
      DX2=0.5*DTHETA2*100.
      DX3=0.5*DTHETA3*100.
      DX4=0.5*DTHETA4*100.
      DX5=0.5*DTHETA5*100.
      DX6=0.5*DTHETA6*100.
      THETAHE= 0.00
      THETALE= 0.007
      THETAD= 0.00
C
C     ENTER TOROID PARAMETERS
C
C TYPES 1-10 ARE "SLAC" RECTANGULAR TOROIDS. TYPES 11-14 ARE
C "FERMI" ROUND TOROIDS. TOROIDS 16-20 ARE FOR THE LINAC
      IF (NORTH) THEN
        LTOROID(1) = .FALSE.
        LTOROID(2) = .FALSE.
C  SPOILERS 3,4 ARE AT Z=344 M IN IR1
        LTOROID(3) = .TRUE.
        LTOROID(4) = .TRUE.
C       LTOROID(3) = .FALSE.
C       LTOROID(4) = .FALSE.
C  SPOILERS 5,6 ARE AT Z=646 M IN IR1
        LTOROID(5) = .FALSE.
        LTOROID(6) = .FALSE.
C  SPOILERS 7,8 ARE AT Z=344 M IN IR2
        LTOROID(7) = .FALSE.
        LTOROID(8) = .FALSE.
        LTOROID(9) = .FALSE.
        LTOROID(10) = .FALSE.
        LTOROID(11) = .FALSE.
        LTOROID(12) = .FALSE.
C       LTOROID(1) = .FALSE.
C       LTOROID(2) = .FALSE.
C       LTOROID(3) = .FALSE.
C       LTOROID(4) = .FALSE.
C       LTOROID(5) = .FALSE.
C       LTOROID(6) = .FALSE.
C       LTOROID(7) = .FALSE.
C       LTOROID(8) = .FALSE.
C       LTOROID(9) = .FALSE.
C       LTOROID(10) = .FALSE.
C       LTOROID(11) = .TRUE.
C       LTOROID(12) = .TRUE.
        LTOROID(13) = .FALSE.
        LTOROID(14) = .FALSE.
        LTOROID(15) = .FALSE.
        LTOROID(16) = .FALSE.
        LTOROID(17) = .FALSE.
        LTOROID(18) = .FALSE.
        LTOROID(19) = .FALSE.
        LTOROID(20) = .FALSE.
C NORTH TYPES
        ITOROID_TYPE(1) = 1
        ITOROID_TYPE(2) = 2
        ITOROID_TYPE(3) = 3
        ITOROID_TYPE(4) = 4
        ITOROID_TYPE(5) = 5
        ITOROID_TYPE(6) = 6
        ITOROID_TYPE(7) = 7
        ITOROID_TYPE(8) = 8
        ITOROID_TYPE(9) = 9
        ITOROID_TYPE(10)= 10
        ITOROID_TYPE(11)= 11
        ITOROID_TYPE(12)= 12
        ITOROID_TYPE(13)= 11
        ITOROID_TYPE(14)= 11
        ITOROID_TYPE(15)= 11
        ITOROID_TYPE(16)= 11
        ITOROID_TYPE(17)= 8
        ITOROID_TYPE(18)= 9
        ITOROID_TYPE(19)= 6
        ITOROID_TYPE(20)= 6
C NORTH BEGIN
        ITOROID_BEGIN(1) = 0
        ITOROID_BEGIN(2) = 0
        ITOROID_BEGIN(3) = 344
        ITOROID_BEGIN(4) = 344
        ITOROID_BEGIN(5) = 646
        ITOROID_BEGIN(6) = 646
        ITOROID_BEGIN(7) = 344
        ITOROID_BEGIN(8) = 344
        ITOROID_BEGIN(9) = 796
        ITOROID_BEGIN(10) =796
        ITOROID_BEGIN(11) =499
        ITOROID_BEGIN(12) =499
        ITOROID_BEGIN(13) = 1173
        ITOROID_BEGIN(14) = 1304
        ITOROID_BEGIN(15) = 1597
        ITOROID_BEGIN(16) = 1950
        ITOROID_BEGIN(17) = 1359
        ITOROID_BEGIN(18) = 1451
        ITOROID_BEGIN(19) = 1556
        ITOROID_BEGIN(20) = 2700
C NORTH LENGTH
        ITOROID_LENGTH(1) = 0
        ITOROID_LENGTH(2) = 0
        ITOROID_LENGTH(3) =   5
        ITOROID_LENGTH(4) =   5
        ITOROID_LENGTH(5) =  9
        ITOROID_LENGTH(6) =  9
        ITOROID_LENGTH(7) =   5
        ITOROID_LENGTH(8) =   5
        ITOROID_LENGTH(9) =  9
        ITOROID_LENGTH(10)=  9
        ITOROID_LENGTH(11)=  2
        ITOROID_LENGTH(12)=  4
        ITOROID_LENGTH(13)=  5
        ITOROID_LENGTH(14)=  5
        ITOROID_LENGTH(15)=  4
        ITOROID_LENGTH(16)=  4
        ITOROID_LENGTH(17)= 30
        ITOROID_LENGTH(18)= 30
        ITOROID_LENGTH(19)= 30
        ITOROID_LENGTH(20)= 30
C NORTH POLARITY
        TOROID_POLARITY(1) = -1.
        TOROID_POLARITY(2) = -1.
        TOROID_POLARITY(3) = -1.
        TOROID_POLARITY(4) = +1.
        TOROID_POLARITY(5) = -1.
        TOROID_POLARITY(6) = +1.
        TOROID_POLARITY(7) = -1.
        TOROID_POLARITY(8) = +1.
        TOROID_POLARITY(9) = -1.
        TOROID_POLARITY(10)= -1.
        TOROID_POLARITY(11)= -1.
        TOROID_POLARITY(12)= -1.
        TOROID_POLARITY(13)= -1.
        TOROID_POLARITY(14)= -1.
        TOROID_POLARITY(15)= -1.
        TOROID_POLARITY(16)= -1.
        TOROID_POLARITY(17)= -1.
        TOROID_POLARITY(18)= +1.
        TOROID_POLARITY(19)= +1.
        TOROID_POLARITY(20)= +1.
C SOUTH SIDE
      ELSE
        LTOROID(1) = .FALSE.
        LTOROID(2) = .FALSE.
C  SPOILERS 3,4 ARE AT Z=344 M IN IR1
        LTOROID(3) = .TRUE.
        LTOROID(4) = .TRUE.
C        LTOROID(3) = .FALSE.
C        LTOROID(4) = .FALSE.
        LTOROID(5) = .FALSE.
        LTOROID(6) = .FALSE.
        LTOROID(7) = .FALSE.
        LTOROID(8) = .FALSE.
        LTOROID(9) = .FALSE.
        LTOROID(10) = .FALSE.
C       LTOROID(11) = .FALSE.
        LTOROID(11) = .TRUE.
C       LTOROID(12) = .FALSE.
        LTOROID(12) = .TRUE.
C       LTOROID(13) = .FALSE.
        LTOROID(13) = .TRUE.
C       LTOROID(14) = .FALSE.
        LTOROID(14) = .TRUE.
C       LTOROID(15) = .FALSE.
        LTOROID(15) = .TRUE.
        LTOROID(16) = .FALSE.
        LTOROID(17) = .FALSE.
        LTOROID(18) = .FALSE.
        LTOROID(19) = .FALSE.
        LTOROID(20) = .FALSE.
C SOUTH TYPES
        ITOROID_TYPE(1) = 14
        ITOROID_TYPE(2) = 15
        ITOROID_TYPE(3) = 3
        ITOROID_TYPE(4) = 4
        ITOROID_TYPE(5) = 5
        ITOROID_TYPE(6) = 6
        ITOROID_TYPE(7) = 7
        ITOROID_TYPE(8) = 8
        ITOROID_TYPE(9) = 9
        ITOROID_TYPE(10)= 10
        ITOROID_TYPE(11)= 11
        ITOROID_TYPE(12)= 11
        ITOROID_TYPE(13)= 11
        ITOROID_TYPE(14)= 11
        ITOROID_TYPE(15)= 11
        ITOROID_TYPE(16)= 11
        ITOROID_TYPE(17)= 8
        ITOROID_TYPE(18)= 9
        ITOROID_TYPE(19)= 6
        ITOROID_TYPE(20)= 6
C SOUTH BEGIN
C ITOROID_BEGIN IS THE INBOARD SIDE
        ITOROID_BEGIN(1) =  1281
        ITOROID_BEGIN(2) =  1281
        ITOROID_BEGIN(3) = 344
        ITOROID_BEGIN(4) = 344
        ITOROID_BEGIN(5) =  646
        ITOROID_BEGIN(6) =  646
        ITOROID_BEGIN(7) = 499
        ITOROID_BEGIN(8) = 499
        ITOROID_BEGIN(9) =  646
        ITOROID_BEGIN(10) = 646
        ITOROID_BEGIN(11) =  973
        ITOROID_BEGIN(12) = 1143
        ITOROID_BEGIN(13) = 1231
        ITOROID_BEGIN(14) = 1356
        ITOROID_BEGIN(15) =  800
        ITOROID_BEGIN(16) = 1950
        ITOROID_BEGIN(17) = 1359
        ITOROID_BEGIN(18) = 1451
        ITOROID_BEGIN(19) = 1556
        ITOROID_BEGIN(20) = 2700
C SOUTH LENGTH
        ITOROID_LENGTH(1) = 120
        ITOROID_LENGTH(2) = 120
        ITOROID_LENGTH(3) =  5
        ITOROID_LENGTH(4) =  5
        ITOROID_LENGTH(5) =  9
        ITOROID_LENGTH(6) =  9
        ITOROID_LENGTH(7) =  9
        ITOROID_LENGTH(8) =  9
        ITOROID_LENGTH(9) =  9
        ITOROID_LENGTH(10)=  9
        ITOROID_LENGTH(11)=  5
        ITOROID_LENGTH(12)=  5
        ITOROID_LENGTH(13)=  5
        ITOROID_LENGTH(14)=  5
        ITOROID_LENGTH(15)=  5
        ITOROID_LENGTH(16)=  4
        ITOROID_LENGTH(17)= 30
        ITOROID_LENGTH(18)= 30
        ITOROID_LENGTH(19)= 30
        ITOROID_LENGTH(20)= 30
C SOUTH POLARITY
        TOROID_POLARITY(1) = +1.
        TOROID_POLARITY(2) = -1.
        TOROID_POLARITY(3) = -1.
        TOROID_POLARITY(4) = +1.
C       TOROID_POLARITY(3) = +1.
C       TOROID_POLARITY(4) = -1.
C       TOROID_POLARITY(3) = +1.
C       TOROID_POLARITY(4) = +1.
C       TOROID_POLARITY(3) = -1.
C       TOROID_POLARITY(4) = -1.
        TOROID_POLARITY(5) = -1.
        TOROID_POLARITY(6) = +1.
        TOROID_POLARITY(7) = -1.
        TOROID_POLARITY(8) = +1.
        TOROID_POLARITY(9) = -1.
        TOROID_POLARITY(10)= +1.
        TOROID_POLARITY(11)= -1.
        TOROID_POLARITY(12)= -1.
        TOROID_POLARITY(13)= -1.
        TOROID_POLARITY(14)= -1.
        TOROID_POLARITY(15)= -1.
        TOROID_POLARITY(16)= -1.
        TOROID_POLARITY(17)= -1.
        TOROID_POLARITY(18)= +1.
        TOROID_POLARITY(19)= +1.
        TOROID_POLARITY(20)= +1.
      END IF
C COUNT TOROIDS IN USE
      DO 20 I=1,20
      IF(LTOROID(I)) NTOR=NTOR+1
  20  CONTINUE
C
C  NSPECT SHOULD ALWAYS BE .TRUE. AT THE BEGINNING OF A RUN. IT IS USED
C  TO AVOID RECALCULATING THE MUON SPECTRUM FOR MULTIPLE SOURCE RUNS
      NSPECT=.TRUE.
C ASSUME BEAM ENTERS MAIN LINAC WITH AN ENERGY OF 15 GEV
      GRAD=(EBEAM-15.)/ACCEL_LENGTH
C CALCULATE LINAC LATTICE PARAMETERS AT THE END OF THE LINAC
      FQUAD_SPACING=1.750*SQRT(EBEAM/15.)
      FQUAD_LENGTH=0.352*SQRT(EBEAM/15.)
      LPOL=1
C
C IF IRUN .FALSE. , ONLY COMPUTE AND PRINT THE PHOTON AND POSITRON
C TRACK LENGTH AND THE MUON SPECTRUM FOR THE FULL BEAM ENERGY
C
      IF(.NOT.IRUN) THEN
        CALL SPECTRUM(EBEAM)
        GO TO 1000
      END IF
C
C  SET THE REFERENCE AXIS AND WALL STARTING POINTS
C  THEN CALCULATE COORDINATES OF THE REFERENCE AXIS
C  X(INDEXC) AND Y(INDEXC) ARE REFERENCEDD TO THE BEAM AXIS
C  THE COORDINATE SYSTEM IS DEFINED AS XO(Z) AND Y0(Z) = 0.
C  AT THE IP, I.E. X0(0)=Y0(0)= 0. COORDINATES OF THE BEAM AXIS
C  AND TUNNEL CENTER LIE IN THE X0, Y0 SYSTEM.
C  SET X0(START) TO MAKE X0 = 0. AT THE IR1 IP, SAME FOR Y0(START)
C  POSITIVE X IS TO THE RIGHT LOOKING DOWNBEAM, I.E. A
C  LEFT-HANDED COORDINATE SYSTEM.
C  CALCULATE WALL AND BEAM AXIS POSITIONS IN 100 CM STEPS
      X0(2200)=169.1
      Y0(2200)=0.
      X(2200)=0.
      Y(2200)=0.
      X0PRIME(2200)= 0.00
      Y0PRIME(2200)=0.
      XAXIS(2200)=X0(2200)
      XAXISP(2200)=X0PRIME(2200)
      DXHE=THETAHE*100.
C AXISLE IS THE LOW ENERGY IR AXIS
C AXISD IS THE LINAC DUMP LINE AXIS
C XWALLLT(I) IS THE LEFT EDGE OF THE WALL AT THE WIDEST
C PART OF THE TUNNEL
C XWALLRT(I) IS THE RIGHT EDGE OF THE WALL AT THE WIDEST
C PART OF THE TUNNEL
      IF(XSIDE.EQ.1) THEN
        XWALLLT(2200)=X0(2200)-XREF
        XWALLRT(2200)=XWALLLT(2200)+400.
        XWALLLT1(2200)=XWALLRT(2200)+150.
        XWALLRT1(2200)=XWALLRT(2200)+500.
      ELSE IF(XSIDE.EQ.-1) THEN
        XWALLRT(2200)=X0(2200)+XREF
        XWALLLT(2200)=XWALLRT(2200)-2.*RTUNNEL
      END IF
      LTUNNEL=.FALSE.
C
C BEGIN AXIS AND WALL CALCULATIONS
C THIS SECTION INCLUDES BOTH HE AND  LE LINES AND DUMP LINE
C THE REFERENCE AXIS OF MUCARLO IS XAXIS(I) IN THE HE LINE
C AXISLE(I) AND AXISD(I) ARE ONLY USED TO DRAW THE LAYOUT
C USE BETA BEAM = 1.
      DO 195 I=2200,1,-1
C XAXIS UP TO BS1
      IF(I.LE.2199.AND.I.GE.1228) THEN
        XAXIS(I)=XAXIS(I+1)+DXHE
        XAXISP(I)=XAXISP(I+1)-DTHETA0
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
 191  FORMAT(I6,4F20.12)
      END IF
      IF(I.EQ.1892) AXISLE(1892)=XAXIS(1892)
      IF(I.EQ.1750) AXISD(1750)=XAXIS(1750)
C  NOW THE LOW ENERGY ARC, BEND RIGHT
      IF(I.LE.1891.AND.I.GE.1687) THEN
        THETALE=THETALE+DTHETA1
        DXLE=THETALE*100.+DX1
C       AXISLE(I)=AXISLE(I+1)+DXLE
C     PRINT 189, THETALE
C  NOW THE LOW ENERGY STRAIGHT TO BS1
C     ELSE IF(I.LE.1686.AND.I.GE.1228) THEN
C       AXISLE(I)=AXISLE(I+1)+DXLE
C  NOW BS1 IN BOTH LINES
      ELSE IF(I.LE.1227.AND.I.GE.830) THEN
        THETAHE=THETAHE-DTHETA2
C       THETALE=THETALE+DTHETA2
        DXHE=THETAHE*100.-DX2
C       DXLE=THETALE*100.+DX2
        XAXIS(I)= XAXIS(I+1)+DXHE
        XAXISP(I)=XAXISP(I+1)-DTHETA2
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA2
C       AXISLE(I)=AXISLE(I+1)+DXLE
C     PRINT 189, THETALE
C  NOW STRAIGHT IN BOTH LINES FROM BS1 TO B5
      ELSE IF(I.LE.829.AND.I.GE.535) THEN
         XAXIS(I)= XAXIS(I+1)+DXHE
         XAXISP(I)=XAXISP(I+1)
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA0
         AXISLE(I)=AXISLE(I+1)+DXLE
C  NOW B5 IN BOTH LINES
      ELSE IF(I.LE.534.AND.I.GE.410) THEN
        THETAHE = THETAHE-DTHETA3
C       THETALE=THETALE+DTHETA3
        DXHE= THETAHE*100.-DX3
C       DXLE=THETALE*100.+DX3
        XAXIS(I)= XAXIS(I+1)+DXHE
        XAXISP(I)=XAXISP(I+1)-DTHETA3
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA3
C       AXISLE(I)=AXISLE(I+1)+DXLE
C     PRINT 189, THETALE
C  NOW STRAIGHT IN BOTH LINES FROM B5 TO B2
      ELSE IF(I.LE.409.AND.I.GE.327) THEN
         XAXIS(I)= XAXIS(I+1)+DXHE
         XAXISP(I)=XAXISP(I+1)
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA0
C        AXISLE(I)=AXISLE(I+1)+DXLE
C  NOW B2 IN BOTH LINES
      ELSE IF(I.LE.326.AND.I.GE.195) THEN
        THETAHE = THETAHE-DTHETA4
C       THETALE=THETALE+DTHETA4
        DXHE= THETAHE*100.-DX4
C       DXLE=THETALE*100.+DX4
        XAXIS(I)= XAXIS(I+1)+DXHE
        XAXISP(I)=XAXISP(I+1)-DTHETA4
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA4
C       AXISLE(I)=AXISLE(I+1)+DXLE
C  NOW STRAIGHT IN BOTH LINES FROM B2 TO B1
      ELSE IF(I.LE.194.AND.I.GE.184) THEN
        XAXIS(I)= XAXIS(I+1)+DXHE
        XAXISP(I)=XAXISP(I+1)
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA0
C       AXISLE(I)=AXISLE(I+1)+DXLE
C  NOW B1 IN BOTH LINES
      ELSE IF(I.LE.183.AND.I.GE.119)THEN
        THETAHE = THETAHE-DTHETA5
C       THETALE=THETALE+DTHETA5
        DXHE= THETAHE*100.-DX5
C       DXLE=THETALE*100.+DX5
        XAXIS(I)= XAXIS(I+1)+DXHE
        XAXISP(I)=XAXISP(I+1)-DTHETA5
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C       PRINT 191, I,XAXISP(I),DTHETA5
C       AXISLE(I)=AXISLE(I+1)+DXLE
C  NOW STRAIGHT IN BOTH LINES FROM B1 TO IP
      ELSE IF(I.LE.118.AND.I.GE.1) THEN
         XAXIS(I)= XAXIS(I+1)+DXHE
         XAXISP(I)=XAXISP(I+1)
        DS(I)=1./COS(XAXISP(I))
        DT(I)=1.0E09*DS(I)/C
C       PRINT 191, I,XAXISP(I),DTHETA0,DS(I),DT(I)
C        PRINT 191, I,XAXISP(I),DTHETA0
C        AXISLE(I)=AXISLE(I+1)+DXLE
      END IF
C  NOW THE DUMP LINE AXIS, BEND LEFT
      IF(I.LE.1749.AND.I.GE.1600) THEN
        THETAD=THETAD+DTHETA6
        DXD=THETAD*100.+DX6
        AXISD(I)=AXISD(I+1)+DXD
C     PRINT 189, THETAD,AXISD(I)
C NOW STRAIGHT TO DUMP
      ELSE IF(I.LE.1599.AND.I.GE.1280) THEN
        AXISD(I)=AXISD(I+1)+DXD
      END IF
C
C NOW CALCULATE THE RIGHT AND LEFT WALL POSITION AT EACH STEP
C THESE LEFT AND RIGHT WALL POSITIONS ARE USED TO CHECK IF
C THE MUON IS IN THE TUNNEL
C FIRST LEFT WALL
      IF(I.LE.2199.AND.I.GE.1750) THEN
        XWALLLT(I)=XWALLLT(I+1)+THETA0*100.
C WALL OF DUMP LINE TUNNEL
      ELSE IF(I.LE.1749.AND.I.GE.1280) THEN
        XWALLLT(I)=AXISD(I)-XREF
C WALL BEYOND DUMP LINE TUNNEL
      ELSE IF (I.EQ.1279) THEN
        XWALLLT(I)=XWALLLT(2200)-75.
      ELSE IF(I.LE.1278.AND.I.GE.1011) THEN
        XWALLLT(I)=XWALLLT(I+1)+THETA0*100.
      ELSE IF (I.EQ.1010) THEN
        XWALLLT(I)=XWALLLT(I+1)-100.
      ELSE IF(I.LE.1009.AND.I.GE.300) THEN
        XWALLLT(I)=XWALLLT(I+1)+THETA0*100.
      ELSE IF (I.EQ.299) THEN
        XWALLLT(I)=XWALLLT(I+1)-514.1
C BELOW IS THE REGION OF THE EXTRACTION LINE WHERE THE TUNNEL WIDENS
      ELSE IF(I.LE.298.AND.I.GE.11) THEN
        XWALLLT(I)=-(I*0.014*100.)-200.
      ELSE IF(I.LE.10.AND.I.GE.1) THEN
        XWALLLT(I)=-1000.
      END IF
C NOW RIGHT WALL BEAM TUNNEL AND BOTH WALLS
C FOR SERVICE TUNNEL
      IF(I.LE.2199.AND.I.GE.1001) THEN
        XWALLRT(I)=XWALLRT(I+1)+THETA0*100.
        XWALLLT1(I)=XWALLRT(I)+150.
        XWALLRT1(I)=XWALLRT(I)+500.
      ELSE IF(I.EQ.1000) THEN
        XWALLRT(I)=XWALLRT(I+1)+150.
        XWALLLT1(I)=XWALLRT(I)+150.
        XWALLRT1(I)=XWALLRT(I)+600.
      ELSE IF(I.LE.999.AND.I.GE.380) THEN
        XWALLRT(I)=XWALLRT(I+1)+THETA0*100.
        XWALLLT1(I)=XWALLRT(I)+150.
        XWALLRT1(I)=XWALLRT(I)+600.
      ELSE IF(I.EQ.379) THEN
        XWALLRT(I)=400.
        XWALLLT1(I)=XWALLRT(I)
        XWALLRT1(I)=XWALLRT(I)
      ELSE IF(I.LE.378.AND.I.GE.10) THEN
        XWALLRT(I)=XWALLRT(I+1)+THETA0*100.
        XWALLLT1(I)=XWALLRT(I)
        XWALLRT1(I)=XWALLRT(I)
      ELSE IF(I.LE.10.AND.I.GE.1) THEN
        XWALLLT(I)= 1000.
      END IF
195   CONTINUE
C SPOILER CAVITY  350 to 330
      DO 196 M=1,20
      XWALLLT(M+329)=XWALLLT(M+329)-200.
      XWALLRT(M+329)=XWALLRT(M+329)+500.
196   CONTINUE
C END WALL POSITION CALCULATION
C
C     PRINT 189, THETALE
189   FORMAT(F9.6,F20.10)
      IF(IPRINT.EQ.0) GO TO 350
C THIS SECTION FOR PRINTING TUNNEL LAYOUT FOR TOPDRAW PICTURES
C     PRINT 190, J,XAXIS(I),XWALLLT(I),XWALLRT(I),XOFFSET(I),
C    1XWALLLT1(I),XWALLRT1(I),AXISLE(I),XAXISP(I),AXISD(I)
190   FORMAT(I6,7F9.1,F9.5,F9.1)
      PRINT 201
      DO 211 I=2200,1,-10
      J=I*(-1)
      PRINT 300, J,XAXIS(I),XAXISP(I)
211   CONTINUE
      PRINT 303
C     PRINT 203
C     DO 213 I=1892,1,-10
C     J=I*(-1)
C     PRINT 300, J, AXISLE(I)
213   CONTINUE
C     PRINT 303
C DUMP LINE AXIS
      PRINT 202
      DO 212 I=1750,1280,-10
      J=I*(-1)
      PRINT 300, J, AXISD(I)
212   CONTINUE
      PRINT 303
C LEFT WALL BEAM TUNNEL
      PRINT 207
      DO 217 I= 2200,1,-1
      J=I*(-1)
      PRINT 300, J, XWALLLT(I)
      IF(I.EQ.1574) PRINT 301
      IF(I.EQ. 320) PRINT 301
217   CONTINUE
      PRINT 302
C RIGHT WALL BEAM TUNNEL
      PRINT 206
      DO 216 I= 2200,  1,-1
      J=I*(-1)
      PRINT 300, J, XWALLRT(I)
      IF(I.EQ. 320) PRINT 301
216   CONTINUE
      PRINT 302
C SERVICE TUNNEL LEFT
      PRINT 204
      DO 214 I=2200,  1,-1
      J=I*(-1)
      PRINT 300, J, XWALLLT1(I)
214   CONTINUE
      PRINT 302
C SERVICE TUNNEL RIGHT
      PRINT 205
      DO 215 I=2200, 1,-1
      J=I*(-1)
      PRINT 300, J, XWALLRT1(I)
215   CONTINUE
      PRINT 302
301   FORMAT('JOIN SOLID')
302   FORMAT('PLOT',/,'JOIN SOLID')
303   FORMAT('PLOT',/,'JOIN DOTS')
201   FORMAT('(IR1 AXIS)')
203   FORMAT('(IR2 AXIS)')
202   FORMAT('(DUMP LINE AXIS)')
207   FORMAT('(IR1 LINE LEFT WALL)')
206   FORMAT('(IR1 LINE RIGHT WALL)')
204   FORMAT('(SERVICE TUNNEL LEFT WALL)')
205   FORMAT('(SERVICE TUNNEL RIGHT WALL)')
300   FORMAT(I6,F9.1,F20.10)
C END TUNNEL PRINTOUT SECTION
350   CONTINUE
C
C  INDEX0 IS THE SOURCE LOCATION - METERS FROM THE IP.         !LK
C  L0 IS THE DISTANCE FROM THE INJECTOR TO THE MUON SOURCE
C  THE FINAL FOCUS BEGINS 2500 METERS FROM THE IP                !LK
      DO 4 ISOURCE = ISOURCE_START,ISOURCE_STOP
C ZERO THE SURVIVING MUON COUNTERS. PL=PLUS, MI=MINUS, T=TOTAL,
C D=DETECTOR
      EBEAM=  E(ISOURCE)
      NEVENT=1000000000*F(ISOURCE )
      MUPLT=0
      MUPLD=0
      MUMIT=0
      MUMID=0
      MUBCAL=0
      MUECAL=0
      NIP=0
      NPOS=0
      S=0.
      TBEAM=0.
      TMU=0.
        INDEX0 = SOURCE_INDEX(ISOURCE)
      J=INDEX0-1
      DO 151 I=J,1,-1
      S=S+DS(I)
      TBEAM=TBEAM+DT(I)
C     PRINT 192, TBEAM,DT(I),I
192   FORMAT(2F20.12,I10)
151   CONTINUE
        L0=ACCEL_LENGTH+2500-INDEX0                            !LK
C       PRINT 95, INDEX0
  95    FORMAT(T5,I5)
        BEAM_LINE_LABEL(INDEX0) = SOURCE_LABEL(ISOURCE)
        WRITE (6,6) SOURCE_LABEL(ISOURCE), INDEX0
    6 FORMAT ('1 SOURCE IS ',A8, 'AT',I6,' METERS FROM THE IP')    !LK
      PRINT 92, FILE
  92  FORMAT(/,' FILE IS',A20,/)
      PRINT 89
  89  FORMAT(2X,'TOROID TYPE, POLARITY, LENGTH, INBOARD FACE LOC.')
      DO 5 I=1,20
    5 IF(LTOROID(I))
     1  PRINT 90, ITOROID_TYPE(I),TOROID_POLARITY(I),ITOROID_LENGTH(I),
     1   ITOROID_BEGIN(I)
  90  FORMAT(I5,F6.1,2I6)
      PRINT 49, JOBID,NTOR,XSIDE,YFLOOR,RTUNNEL,XBEAM
 49   FORMAT('JOBID=',I5,'  NTOR=',I4,'  XSIDE=',F5.1,
     1'  YFLOOR=',F6.2,'RTUNNEL=',F6.2,'XBEAM=',F6.2)
C     PRINT 503
503   FORMAT(' (INDEX       X0       Y         XX         XP       X0P
     1      XAXIS      XAXISP      P')
      IF(NORTH) THEN
        PRINT 44
      ELSE
        PRINT 43
      END IF
 44   FORMAT('SHAPE = ROUND')
 43   FORMAT('SHAPE = SQUARE')
      PRINT 45, KSTEP
 45   FORMAT('KSTEP=',I5)
      PRINT 74, NDUMP
 74   FORMAT('NDUMP=',I5)
C  SOURCE POSITIONS 6 THRU 17 ARE RESERVED FOR THE FINAL FOCUS
        IF(ISOURCE.LE.5) THEN
          INDEXFF=2200                                          !LK
          ENER=EBEAM*ISOURCE/10.
          CALL SPECTRUM(ENER)
        ELSE
          INDEXFF=INDEX0
          IF(NSPECT)      THEN
            ENER=EBEAM
            CALL SPECTRUM(EBEAM)
C            NSPECT=.FALSE.
          END IF
        END IF
C
C     PRINT 1112, TYMST
 1112 FORMAT(/,T3,' TYMST',G15.5,' SEC (BEFORE THE IEVENT-LOOP)',/)
C
C  BEGIN EVENT LOOP
C
        DO 1 IEVENT = 1, NEVENT
        RN=rand()
        TMU=0.
        TDMU=0.
        LSTEP=0
        IZ=ISTEP
C       CALL LEFT1A(TYMNOW)
C       IF(TYMNOW.LT.TYMOUT) GO TO 7
C       PRINT 94, IEVENT, NEVENT
  94    FORMAT(T3,2I5)
          CALL GENERATE(ENER)
C  IF SOURCE IS IN THE FINAL FOCUS, SKIP OVER ACCELERATOR SECTION
        IF(ISOURCE.GE.10)  GO TO 100
C  SOURCE SOMEWHERE IN ACCELERATOR. TRACK MUONS TO BEGINNING
C  OF FINAL FOCUS
C
        QUAD_SPACING=FQUAD_SPACING*SQRT(L0/ACCEL_LENGTH)
        QUAD_LENGTH=FQUAD_LENGTH*SQRT(L0/ACCEL_LENGTH)
        LC=L0
        LS=0
        LQ=0
          DO 2 KNDEX = INDEX0 - IZ,2200, -IZ                      !LK
            INDEXC = KNDEX
            CALL ADVANCE_INDEX
            CALL ACCEL(LFINISH)
            IF (LFINISH) GO TO 3
    2     CONTINUE
100   CONTINUE
C     DO 105 I=1,10000
C     XAXISP(I)=0.
105   CONTINUE
C SET INITIAL CONDITIONS. THIS IS THE CORRECTION DISCUSSED AT TOP OF
C PAGE 36 IN MUCARLO BOOK 2
      X0(INDEXC)=X(INDEXC)+XAXIS(INDEXC)
      X0PRIME(INDEXC)=XPRIME(INDEXC)-XAXISP(INDEXC)
      Y0(INDEXC)=Y(INDEXC)
      Y0PRIME(INDEXC)=YPRIME(INDEXC)
      KNDEX=INDEXFF-IZ
C  HERE STARTS THE LOOP TO TRACK THE MUON THROUGH THE COLLIMATION
C  AND FINAL FOCUS SECTIONS
199   CONTINUE
            INDEXC = KNDEX
C ADVANCE INDEX RETURNS WITH THE STARTING COORDINATES FOR THE NEXT STEP
            CALL ADVANCE_INDEX
C
C     PRINT 91, X(INDEXC),XPRIME(INDEXC),P(INDEXC),INDEXC,IZ,IEVENT
   91 FORMAT(T2,'MAIN    ',3(E10.4,2X),3I5)
            CALL FINAL_FOCUS(LFINISH)
C TRANSLATE TO TUNNEL COORDINATE SYSTEM
      X0(INDEXC)=X(INDEXC)+XAXIS(INDEXC)
      X0PRIME(INDEXC)=XPRIME(INDEXC)-XAXISP(INDEXC)
      Y0(INDEXC)=Y(INDEXC)
      Y0PRIME(INDEXC)=YPRIME(INDEXC)
      DSMU(INDEXC)=SQRT(1. + X0PRIME(INDEXC)**2 + Y0PRIME(INDEXC)**2)
      ENMU(INDEXC)=SQRT(P(INDEXC)**2 + XMU**2)
      BETAMU(INDEXC)=P(INDEXC)/ENMU(INDEXC)
      VMU(INDEXC)=C*BETAMU(INDEXC)
      DTMU(INDEXC)=1.0E09*DSMU(INDEXC)/VMU(INDEXC)
      TMU=TMU+DTMU(INDEXC)
C TDMU IS THE TOTAL DISTANCE THE MUON TRAVELS
      TDMU=TDMU+DSMU(INDEXC)
C     PRINT 1500, DSMU(INDEXC),ENMU(INDEXC),BETAMU(INDEXC),VMU(INDEXC),
C    1DTMU(INDEXC),TMU,INDEXC
 1500 FORMAT(6F15.7,I10)
C COMPRESS COORDINATES INTO A SEQUENTIAL LIST STARTING WITH LSTEP=1
C AT THE MUON SOURCE POINT
      LSTEP=LSTEP+1
      XX(LSTEP)=X(INDEXC)
      YY(LSTEP)=Y(INDEXC)
      XXPRIME(LSTEP)=XPRIME(INDEXC)
      YYPRIME(LSTEP)=YPRIME(INDEXC)
      PP(LSTEP)=P(INDEXC)
      LZ(LSTEP)=INDEXC
      XX0(LSTEP)=X0(INDEXC)
      XX0PRIME(LSTEP)=X0PRIME(INDEXC)
      XXAXIS(LSTEP)=XAXIS(INDEXC)
      XXAXISP(LSTEP)=XAXISP(INDEXC)
      M=LSTEP
C      PRINT 502, LZ(M),XX0(M),YY(M),XX(M),XXPRIME(M),XX0PRIME(M),
C    *    XXAXIS(M),XXAXISP(M),PP(M)
502   FORMAT(I6,3X,3F9.3,3X,2F11.7,F9.3,F11.7,F8.3)
500   FORMAT(' (INDEX       X0       Y         XX         XP       X0P
     1      XAXIS         XAXISP      P', ' CHARGE = ',I3,')')
C
      IF (LFINISH) GO TO 3
      KNDEX=KNDEX-IZ
      IF(KNDEX.GE.1) GO TO 199
    3     CONTINUE
          CALL HISTOGRAM(LFINISH)
    1   CONTINUE
    7   CONTINUE
C
C     PRINT 1113, TYMEND
C1113 FORMAT(T3,' TYMEND',G15.5,' SEC (AFTER THE IEVENT-LOOP)',/)
C END OF MONTE CARLO.  CALCULATE RATIOS AND PRINT RESULTS.
C PRINT TRAJECTORIES OF POSITIVE MUONS WHICH REACH IP
      PRINT 68
      DO 64 N=1,NPOS
      DO 65 I=1,MAXL,10
      PRINT 9, LPOS(N,I),XPOS(N,I),YPOS(N,I),PPOS(N,I)
   65   CONTINUE
C PRINT FINAL COORDINATES
        I=MAXL
      PRINT 9, LPOS(N,I),XPOS(N,I),YPOS(N,I),PPOS(N,I)
C PRINT TOPDRAW INFORMATION
        PRINT 66
        PRINT 67, MAXL
   64 CONTINUE
   67 FORMAT('(STEPS =  ',I6,')')
   66 FORMAT('JOIN 1')
   68 FORMAT('SET COLOR green')
    9 FORMAT(I6,3X,3F9.3)
C PRINT NUMBER OF POSITIVE MUONS WHICH REACH IP
      PRINT 69, NPOS
   69 FORMAT('( NPOS=',I5)
C PRINT FINAL COORDINATES UP TO THE FIRST 100 EVENTS WHICH REACH IP
      PRINT 61
61    FORMAT('(EVENT    P0       PF       XF       YF     CHARGE)')
      DO 60 I=1,NIP
      IF(I.LE.100) THEN
        PRINT 62, I,PBI(I),PBF(I),XF(I),YF(I),ICH(I)
      ELSE
        GO TO 63
      END IF
   60 CONTINUE
62    FORMAT('(',I4,4F9.3,4X,I3,')')
63    CONTINUE
      IEVENT=IEVENT-1
      EVENT=IEVENT
      ITOT=MUPLT+MUMIT
      ITOTD=MUPLD+MUMID
      PRINT 50, PMIN,IEVENT,NEVENT,TBEAM,S
 50   FORMAT('PMIN=   ',F5.1,' IEVENT=',I9,' NEVENT=',I9,
     1'  TBEAM=',F15.10,'  S=',F15.10)
      PRINT 46, ITOT,ITOTD
 46   FORMAT('TOTAL MUONS OUTSIDE DETECTOR=',I6,
     1 ' TOTAL MUONS IN IR1 DETECTOR=',I6)
      PRINT 51, MUPLT,MUPLD
 51   FORMAT('NUMBER OF SURVIVING MU+ OUTSIDE DETECTOR ',I6,
     1 '  NUMBER OF MU+ IN IR1 DET. =  ',I6)
      PRINT 52, MUMIT,MUMID
 52   FORMAT('NUMBER OF SURVIVING MU- OUTSIDE DETECTOR  ',I6,
     1 '  NUMBER OF MU- IN IR1 DET. =  ',I6)
      PRINT 70, MUBCAL,MUECAL
 70   FORMAT('NUMBER OF MUONS INSIDE R = 2.0 M ',I6,
     1 '  NUMBER OF MUONS INSIDE R = 2.5 M ',I6)
      APLT=MUPLT/EVENT
      APLD=MUPLD/EVENT
      AMIT=MUMIT/EVENT
      AMID=MUMID/EVENT
      MUCAL=MUBCAL+MUECAL
      ABCAL=MUBCAL/EVENT
      AECAL=MUECAL/EVENT
      ACAL=MUCAL/EVENT
      AT=APLT+AMIT
      AD=APLD+AMID
      FMU=WEIMU*AD
      GMU=WEIMU*AT
      AMU=WEIMU*ABCAL
      CMU=WEIMU*AECAL
      RMU=WEIMU*ACAL
      IF(RMU.GT.0.) THEN
        SMU=1./RMU
      ELSE
        SMU=0.
      END IF
      IF(FMU.GT.0.) THEN
        EMU=1./FMU
      ELSE
        EMU=0.
      END IF
      IF(GMU.GT.0.) THEN
        HMU=1./GMU
      ELSE
        HMU=0.
      END IF
      IF(AMU.GT.0.) THEN
        BMU=1./AMU
      ELSE
        BMU=0.
      END IF
      IF(CMU.GT.0.) THEN
        DMU=1./CMU
      ELSE
        DMU=0.
      END IF
      PRINT 53, AT
 53   FORMAT('ATTN. OF MUONS REACHING IP= ',E9.3)
      PRINT 54, AD
 54   FORMAT('ATTN. OF MUONS REACHING DETECTOR= ',E9.3)
      PRINT 56, WEIMU
 56   FORMAT('WEIMU=',E10.3)
      PRINT 55, FMU
 55   FORMAT('MUONS IN DETECTOR PER ELECTRON HITTING A COLLIMATOR= ',
     1E10.3)
      PRINT 57, EMU
 57   FORMAT('ELECTRONS ON COLL. YIELDING 1 MU IN DETECTOR= ',E10.3)
      PRINT 58, GMU
 58   FORMAT('MUONS IN HALL PER ELECTRON HITTING A COLLIMATOR= ',E10.3)
      PRINT 59, HMU
 59   FORMAT('ELECTRONS ON COLL. YIELDING 1 MU IN HALL= ',E10.3)
      PRINT 71, BMU
 71   FORMAT('ELECTRONS ON COLL. YIELDING 1 MU IN R = 2 M = ',E10.3)
      PRINT 72, DMU
 72   FORMAT('ELECTRONS ON COLL. YIELDING 1 MU IN R = 2.5 M = ',E10.3)
C     PRINT 73, SMU
 73   FORMAT('DUMMY OUTPUT ',E10.3)
C     DELTYM=TYMTRK-TYMNOW
C     XINCTYM=DELTYM/EVENT
C     PRINT 48, DELTYM,XINCTYM
 48   FORMAT('TOTAL TRACKING TIME=',F10.4,' SEC',
     1'   OR',F10.4,' SEC/EVENT')
C     PRINT 47, RANST, INITIAL
 47   FORMAT('STARTING RANDOM NUMBER=',F20.15,'   INITIAL=  ',I11)
        CALL PRINTOUT
    4 CONTINUE
1000  CONTINUE
      END
C
      SUBROUTINE ADVANCE_INDEX
C
C     ROUTINE TO COPY INFORMATION TO NEXT INDEX
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/BL/BEAM_LINE_LABEL(10000)
      CHARACTER*8 BEAM_LINE_LABEL      ! Lew-NOTE: added by Ralph 4/1/00
C
      INDEXP = INDEXC + IZ
      X(INDEXC) = X(INDEXP)
      Y(INDEXC) = Y(INDEXP)
      Z(INDEXC) = Z(INDEXP)
      XPRIME(INDEXC) = XPRIME(INDEXP)
      YPRIME(INDEXC) = YPRIME(INDEXP)
      X0(INDEXC) = X0(INDEXP)
      Y0(INDEXC) = Y0(INDEXP)
      X0PRIME(INDEXC) = X0PRIME(INDEXP)
      Y0PRIME(INDEXC) = Y0PRIME(INDEXP)
      P(INDEXC) = P(INDEXP)
C
      RETURN
      END
C
C
      SUBROUTINE BMAG(IMAG)
C
C     ROUTINE TO SIMULATE BENDING MAGNETS
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
      COMMON/BEAM/EBEAM
C
C     BEND IS THE BEND OF A NEGATIVE PARTICLE PER METER OF MAGNET
C  FUDGE IS A FACTOR TO CORRECT EACH MAGNET TO AN INTEGRAL # OF M  !LK
C     POLE IS THE HALF-WIDTH OF THE POLE
C     COIL_WIDTH IS THE HALF-WIDTH OF THE COIL
C     IRON_WIDTH IS THE HALF-WIDTH OF THE IRON
C     GAP IS THE HALF-HEIGHT OF THE GAP
C     COIL_HEIGHT IS THE HALF-HEIGHT OF THE COIL
C     IRON_HEIGHT IS THE HALF-HEIGHT OF THE IRON
C     TOP_FACTOR IS THE RATIO BETWEEN THE POLE AND THE TOP IRON
C     SIDE_FACTOR IS THE RATIO BETWEEN THE POLE AND THE SIDE IRON
      DIMENSION BEND(30)                                        !LPK,3/30/99
C
C  CLASS 11 IS E_COLL, CLASS 12 IS B5, CLASS 13 IS B2, CLASS 14 IS B1
C
C     These fields are for a 500 GEV BEAM
      REAL FIELD(30)/-0.36576,0.52668,0.41894,0.18288,0.6746,     !15
     *          0.094,0.93455,1.045985,-0.93455,-0.11668,     !20
     *          0.377574,-0.302776,-1.627931,-0.446489,0.099117,    !25
     *               0.446489,-0.099117,0.25694,-0.2890,0.2890,      !30
     *              -0.25694,-0.72816,1.02154,7*1./               !40
      REAL FUDGE(30)/0.9500,0.95,0.950,0.950,1.00,      !15
     *               5*1.0,                                 !20
     *               3*1.0625,2*1.0,                           !25
     *               15*1.0/                                   !40
      REAL POLE(30)/ 10*7.00,14*2.02,6*4.04/
      REAL COIL_WIDTH(30)/ 10*9.75,14*6.09,6*5.14/
      REAL IRON_WIDTH(30)/ 10*11.75,14*7.99,6*7.68/             !LK
C     REAL IRON_WIDTH(30)/ 10*20.,14*7.99,6*7.68/             !LK
      REAL GAP(30)/10*3.30,20*1.27/                          !LK
      REAL COIL_HEIGHT(30)/10*5.75,14*6.07,6*7.66/             !LK
      REAL IRON_HEIGHT(30)/10*8.05,14*7.97,6*12.7/            !LK
C     REAL IRON_HEIGHT(30)/10*15.0,14*7.97,6*12.7/            !LK
      REAL TOP_FACTOR(30)/10*1.034,14*1.063,6*1.590/
      REAL SIDE_FACTOR(30)/10*1.034,14*1.063,6*1.590/
C
C     FIRST CHANGE THE COORDINATE SYSTEM IN THE OPPOSITE DIRECTION
C     TO THE ELECTRON BEND
C     CALCULATE BEND/METER FOR A 500 GEV BEAM                  !LPK,3/30/99
C     BEND(IMAG)=0.03*FIELD(IMAG)/500.                         !LPK,3/30/99
C ADD FUDGE TO THE BEND EQUATION                               !LPK,1/11/16
      BEND(IMAG)=0.03*FIELD(IMAG)*FUDGE(IMAG)/500.             !LPK,1/11/16
      XPRIME(INDEXC) = XPRIME(INDEXC) - BEND(IMAG)*IZ
      X0PRIME(INDEXC) = X0PRIME(INDEXC) + BEND(IMAG)*IZ
C     PRINT 500, XPRIME(INDEXC),X0PRIME(INDEXC),X(INDEXC)
500   FORMAT(' BMAG XPRIME_IN=',F11.7,'   X0PRIME=',F11.7,
     1'  X(INDEXC)=',F9.3)
C
C     TO SAVE TIME, CHECK IF NOT IN MAGNET IRON
C
      IF (ABS(X(INDEXC)).GT.IRON_WIDTH(IMAG).OR.
     1ABS(Y(INDEXC)).GT.IRON_HEIGHT(IMAG)) THEN
        CALL GIRDER
C     PRINT 501, XPRIME(INDEXC),X0PRIME(INDEXC),X(INDEXC)
501   FORMAT(' BMAG XPRIME_OUT=',F11.7,'   X0PRIME=',F11.7,
     1'  X(INDEXC)=',F9.3)
        RETURN
      END IF
C
C     START IN CENTER AND WORK OUT
C
C     MAGNETIC GAP (BEND RIGHT)
C
      IF (ABS(X(INDEXC)).LT.POLE(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.GAP(IMAG)) THEN
        XPRIME(INDEXC) = XPRIME(INDEXC)
     1   - ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        RETURN
C
C     POLE (BEND RIGHT)
C
      ELSE IF (ABS(X(INDEXC)).LT.POLE(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.COIL_HEIGHT(IMAG)) THEN
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        XPRIME(INDEXC) = XPRIME(INDEXC)
     1   - ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
C
C     GAP (NO BEND)
C
      ELSE IF (ABS(X(INDEXC)).LT.COIL_WIDTH(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.GAP(IMAG)) THEN
        CONTINUE
C
C     COIL (NO BEND)
C
      ELSE IF (ABS(X(INDEXC)).LT.COIL_WIDTH(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.COIL_HEIGHT(IMAG)) THEN
        CALL COPPER(FUDGE(IMAG)*IZ)                               !LK
C
C     TOP CENTER IRON (BEND RIGHT AND VERTICALLY)
C
      ELSE IF (ABS(X(INDEXC)).LT.POLE(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.IRON_HEIGHT(IMAG)) THEN
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        XPRIME(INDEXC) = XPRIME(INDEXC)
     1   - 0.707*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        IF (X(INDEXC)*Y(INDEXC).GT.0) THEN
          YPRIME(INDEXC) = YPRIME(INDEXC)
     1    + 0.707*TOP_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        ELSE
          YPRIME(INDEXC) = YPRIME(INDEXC)
     1    - 0.707*TOP_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        END IF
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
C
C     TOP IRON (BEND VERTICALLY)
C
      ELSE IF (ABS(X(INDEXC)).LT.COIL_WIDTH(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.IRON_HEIGHT(IMAG)) THEN
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        IF (X(INDEXC)*Y(INDEXC).GT.0) THEN
          YPRIME(INDEXC) = YPRIME(INDEXC)
     1     + TOP_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        ELSE
          YPRIME(INDEXC) = YPRIME(INDEXC)
     1     - TOP_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        END IF
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
C
C     SIDE IRON (BEND LEFT)
C
      ELSE IF (ABS(X(INDEXC)).LT.IRON_WIDTH(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.COIL_HEIGHT(IMAG)) THEN
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        XPRIME(INDEXC) = XPRIME(INDEXC)
     1   + SIDE_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
C
C     CORNER IRON (BEND LEFT AND VERTICALLY)
C
      ELSE IF (ABS(X(INDEXC)).LT.IRON_WIDTH(IMAG).AND.
     1 ABS(Y(INDEXC)).LT.IRON_HEIGHT(IMAG)) THEN
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        XPRIME(INDEXC) = XPRIME(INDEXC)
     1  + 0.707*SIDE_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        IF (X(INDEXC)*Y(INDEXC).GT.0) THEN
          YPRIME(INDEXC) = YPRIME(INDEXC)
     1    + 0.707*TOP_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        ELSE
          YPRIME(INDEXC) = YPRIME(INDEXC)
     1    - 0.707*TOP_FACTOR(IMAG)*ICHARGE*IZ*BEND(IMAG)*EBEAM/P(INDEXC)
        END IF
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
      END IF
C
      RETURN
      END
C
      SUBROUTINE LIGHT_CONCRETE(XMETER)                                  !LK
C
C BELOW IS VERY LOW DENSITY COMCRETE
      CALL PLOSS(1,2.2*XMETER)                                   !LK
      CALL SCATT(0.331*XMETER)                                     !LK
C
      RETURN
      END
C
      SUBROUTINE CONCRETE(XMETER)                                  !LK
C
C  USE FNAL MARS DENSITY
      CALL PLOSS(1,235.0*XMETER)                                   !LK
      CALL SCATT(8.780*XMETER)                                     !LK
C  BEFORE MARS
C     CALL PLOSS(1,262.2*XMETER)                                   !LK
C     CALL SCATT(9.331*XMETER)                                     !LK
C BELOW IS SANDSTONE
C     CALL PLOSS(1,210.2*XMETER)                                   !LK
C     CALL SCATT(7.480*XMETER)                                     !LK
C BELOW IS VERY LOW DENSITY COMCRETE
C     CALL PLOSS(1,2.2*XMETER)                                   !LK
C     CALL SCATT(0.331*XMETER)                                     !LK
C
      RETURN
      END
C
C
      SUBROUTINE CONDUCTOR(XMETER)                                 !LK
C
      CALL COPPER(0.35*XMETER)                                     !LK
C
      RETURN
      END
C
      SUBROUTINE COPPER(XMETER)                                    !LK
C
      CALL PLOSS(2,871.65*XMETER)                                  !LK
      CALL SCATT(69.92*XMETER)                                     !LK
C
      RETURN
      END
C
C
      FUNCTION GAUSS(S,A)
C
C     S = STANDARD DEVIATION, A = MEAN
C
      DIMENSION R(12)
      DO 10 I=1,12
      RN= rand()
      R(I)=RN
   10 CONTINUE
      SUM = R(1) + R(2) + R(3) + R(4) + R(5) + R(6) + R(7) + R(8) +
     * R(9) + R(10) + R(11) + R(12)
      GAUSS = (SUM - 6.)*S + A
      RETURN
      END
C
      SUBROUTINE FERMI_TOROID(I,JTYPE)
C
C     ROUTINE TO INSERT A MUON SPOILER OF THE "FERMILAB" TYPE
C     IN THE TUNNEL.  THEY ARE DONUTS
C
C     FIVE TYPES ARE AVAILABLE, 11 THRU 15.  THE
C     MAXIMUM OUTSIDE RADIUS IS 70 INCHES = 1.778 m
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTOROID/LTOROID(20),ITOROID_TYPE(20),ITOROID_BEGIN(20),
     1 ITOROID_LENGTH(20),TOROIDX(20),TOROID_POLARITY(20),NTOR
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
      LOGICAL LTOROID
C
C
C     FUDGE REPRESENTS THE DIFFERENCE BETWEEN THE TRUE LENGTH AND THE
C     NOMINAL LENGTH
C
      REAL FUDGE(5)/1.000,1.0000,1.0000,1.0000,1.000/
      REAL HOLE_RADIUS(5)/1.0,1.0,0.5,0.94,10.8/                   !LK
      REAL O_RADIUS(5)/70.,100.0,70.,10.2,27.94/                    !LK
      REAL SHIELD_RADIUS(5)/1.50,1.50,0.75,1.02,10.9/              !LK
      REAL CONDUCT_RADIUS(5)/2.5,2.5,1.0,1.65,11.5/                !LK
      REAL FIELD_FACTOR(5)/1.0,1.0,1.0,0.5,1.0/
C
C     FIELD CORRESPONDS TO THE THEORETICAL FIELD FOR 100 A X 48 TURNS
C     THE MEASURED FIELD AT 100 A IS .970 OF THIS AND AT 150 A IT IS
C     1.0385 OF THIS
C
      REAL FIELD(70)/18.3, 18.2, 17.5, 16.9, 16.4,
     1               16.2, 16.0, 15.7, 15.6, 15.5,
     2               15.3, 15.2, 15.0, 14.9, 14.8,
     3               14.7, 14.6, 14.5, 14.4, 14.3,
     4               14.2, 14.0, 13.9, 13.8, 13.7,
     5               13.6, 13.5, 13.4, 13.3, 13.2,
     6               13.1, 13.0, 12.9, 12.8, 12.7,
     7               12.6, 12.5, 12.4, 12.3, 12.2,
     8               12.1, 12.0, 11.9, 11.8, 11.7,
     9               11.6, 11.5, 11.4, 11.3, 11.2,
     1               11.1, 11.0, 10.9, 10.8, 10.7,
     1               10.6, 10.5, 10.4, 10.3, 10.2,
     1               10.1, 10.0,  9.9,  9.8,  9.7,
     1                9.6,  9.5,  9.4,  9.3,  9.2/
C
C
C     TRANSFORM TO TOROID COORDINATES
C
      ITYPE = JTYPE - 10
      XC = X(INDEXC)
      YC = Y(INDEXC)
      RC = SQRT(XC**2 + YC**2)
C
C  DELETE BASE PLATE IN ORIGINAL MUCARLO                           !LK
C
      IF(RC.GT.O_RADIUS(ITYPE)) THEN
C       CALL GIRDER
        RETURN
      END IF
C
C     HOLE REGION
C
      IF (RC.LT.HOLE_RADIUS(ITYPE)) RETURN
C
C     MAGNETIC SHIELDING PIPE
C
      IF (RC.LT.SHIELD_RADIUS(ITYPE)) THEN
        CALL IRON(FUDGE(ITYPE)*ISTEP)                              !LK
        RETURN
      END IF
C
C     COIL REGION
C
      IF (RC.LT.CONDUCT_RADIUS(ITYPE)) THEN
        CALL CONDUCTOR(FUDGE(ITYPE)*ISTEP)                         !LK
        RETURN
      END IF
      AXC=ABS(XC)
      AYC=ABS(YC)
C
C     IT'S NOW DETERMINED THAT MUON IS IN THE MAGNETIC FIELD
C     CALCULATE BEND ANGLE FOR 1 GEV PARTICLE IN CENTRAL FIELD
C
C POSITIVE POLARITY MEANS FIELD IS COUNTER CLOCKWISE LOOKING
C DOWNSTREAM, AND MU- ARE FOCUSSED.
C     IR = RC + 2.54                                               !LK
      IR = RC - 1.0                                                !LK
      BEND=0.03*ISTEP*FIELD(IR)*TOROID_POLARITY(I)
     1*ICHARGE*FUDGE(ITYPE)*FIELD_FACTOR(ITYPE)                    !LK
C
C     CIRCULAR REGION
C
      CALL IRON(FUDGE(ITYPE)*ISTEP/2.)                             !LK
      FX = AXC/RC
      FY = AYC/RC
      BEND = BEND/P(INDEXC)
      XPRIME(INDEXC) = XPRIME(INDEXC) + BEND*SIGN(1.,XC)*FX
      YPRIME(INDEXC) = YPRIME(INDEXC) + BEND*SIGN(1.,YC)*FY
      CALL IRON(FUDGE(ITYPE)*ISTEP/2.)                             !LK
C
      RETURN
      END
C
      SUBROUTINE GENERATE(ENER)
C
C     ROUTINE TO GENERATE A MUON WITH P AND THETA
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/MUDIST/P_THETA_DIST(750,70)
      COMMON/MFLAG/NSPECT
      COMMON/WEIGHT/WEIMU
      COMMON/MP/PMIN
C      COMMON/THETA/THETAMAX(750)
      COMMON/IFLAG/IRUN,POSITRON,BH
      LOGICAL IRUN,POSITRON,BH
      LOGICAL THETABH
      COMMON/SWITCH/ISWPEN,ISWSTR,ISW_WG,ISW_S,ISW_Q,ISW_SQ,ISW_X,ISW_Y,
     1       ISW_QT
      COMMON/USER/PMUIN,THMUIN,YPRIM0
      LOGICAL NSPECT
      DATA DELE/1./
      REAL*8 P_THETA_DIST
      INTEGER minp
C      REAL*8 THETAMAX
C     REAL*4 RAN9
C
C     P_THETA_DIST(IP,ITHETA) IS IN THE FOLLOWING UNITS:
C        P =              (IP-0.5)
C        THETA = (M/P)*(0.1*ITHETA - 0.05)
C
C     CHOOSE CHARGE
C
      RN=rand()
      IF (RN.GT.0.5) THEN
        ICHARGE = 1
      ELSE
        ICHARGE = -1
      END IF
C
C     CHOOSE P AND THETA
C
      IBEAM=ENER
      MINP=PMIN
C     PRINT 96, ENER
 96   FORMAT(T2,'ENER =',E10.4)  
C     PRINT 99, DELE,RANDOM,INDEX0
 99   FORMAT(T2,2F10.4,I5)
      RN=rand()
      DO 1 IP = MINP,IBEAM
C     PRINT 92, P_THETA_DIST(IP,70),IP, MINP, RN
 92   FORMAT('P,THETA(IP,70) = ',F10.4,2I5,F10.5)
      IF (P_THETA_DIST(IP,70).GT.RN) GO TO 2
    1 CONTINUE
    2 CONTINUE
      RN=rand()
      P(INDEX0) = DELE*(IP -1 + RN)
C   PRINT 98, P(INDEX0),IP, DELE, RN
 98      FORMAT('PMU AT SOURCE =',F10.3,I5, F10.3, F10.5)
      DO 3 ITHETA = 1,70
        IF (P_THETA_DIST(IP,ITHETA).GT.RN) GO TO 4
    3 CONTINUE
    4 CONTINUE
      RTHETA=ITHETA
      RN=rand()
    6 CONTINUE
      THETA = (0.105659/P(INDEX0))*0.1*(ITHETA - 1 + RN)
C     IF(.NOT.POSITRON) THEN
C       THETA=(0.1056/P(INDEX0))*0.1*(ITHETA-1+RN)
C     ELSE
C       THETA=THETAMAX(IP)*RN
C     END IF
C     PRINT 97, THETA,ITHETA
 97      FORMAT('THETA MU AT SOURCE =',F10.4,I5)
C
C     HISTOGRAM PRODUCTION QUANTITIES
C
C     CHOOSE PHI
C
      RN=rand()
      PHI = 2.*3.1415927*RN
      XPRIME(INDEX0) = TAN(THETA)*COS(PHI)
      YPRIME(INDEX0) = TAN(THETA)*SIN(PHI)
C
C     CHOOSE X AND Y FOR SPOILERS
C
      RN=rand()
C FOR SPOILERS, LEFT or RIGHT, UP or DOWN
      RX=1.
      IF(RN.LE.0.5) RX=-1.
      X(INDEX0) = 0.0930*RX
      RN=rand()
      RY=1.
      IF(RN.LE.0.5) RY=-1.
      Y(INDEX0) = 0.0400*RY
      Z(INDEX0) = 1.*INDEX0
      INDEXC=INDEX0
C
C     NOW PUT IN SCATTERING AND ENERGY LOSS IN SOURCE
C ASSUME SCATTERING AND ENERGY LOSS IN 0.3RL OF COPPER
C
C THE 2ND PARAMETER IN PLOSS IS THE TARGET THICKNESS IN G/CM**2
        CALL PLOSS(2,3.84)
        CALL SCATT(0.3)
C    PRINT 91, X(INDEXC),Y(INDEXC),Z(INDEXC),P(INDEXC)
 91   FORMAT('GENERATE   ',4E15.4)
C     END IF
C FOR AXIS TEST SET P,X,Y,XP,YP,ICHARGE
C     P(INDEX0)=250.
C     P(INDEX0)=238.294
C     X(INDEX0)= 10.
C     X(INDEX0)= 0.0
C     Y(INDEX0)=0.
C     XPRIME(INDEX0)=0.0
C     YPRIME(INDEX0)=0.0
C     ICHARGE=-1
C     ICHARGE= 1
C FOR TRAJECTORY TEST SET XP
C     XPRIME(INDEX0)=0.00080
C
      RETURN
      END
C
      SUBROUTINE GIRDER
C
C     ROUTINE TO HANDLE CONCRETE GIRDERS
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      IF (ABS(X(INDEXC)).LT.30.48.AND.Y(INDEXC).LT.-40.64.AND.
     1 Y(INDEXC).GT.-71.12) THEN                                   !LK
        CALL CONCRETE(1.*IZ)                                       !LK
      ELSE
        CALL TUNNEL
      END IF
C
      RETURN
      END
C
      SUBROUTINE GRANITE(XMETER)                                  !LK
      CALL PLOSS(1,270.*XMETER)                                    !LK
      CALL SCATT(10.17*XMETER)                                      !LK
      RETURN
      END
C
      SUBROUTINE HISTOGRAM(LFINISH)
C
C     ROUTINE TO ACCUMULATE HISTOGRAMS
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/DTIME/TBEAM,TMU,TDMU,S
      COMMON/LIST/LZ(10000),XX(10000),
     1 YY(10000),XXPRIME(10000),YYPRIME(10000),PP(10000)
      COMMON/LIST1/XX0(10000),XX0PRIME(10000),XXAXIS(10000),
     1 XXAXISP(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/BUFFER/PBI(100),PBF(100),XF(100),YF(100),ICH(100)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/BL/BEAM_LINE_LABEL(10000)
      CHARACTER*8 BEAM_LINE_LABEL
      COMMON/CDUMP/NDUMP,MUPLT,MUPLD,MUMIT,MUMID,MUBCAL,MUECAL,NIP,NPOS
      COMMON/CTOROID/LTOROID(20),ITOROID_TYPE(20),ITOROID_BEGIN(20),
     1 ITOROID_LENGTH(20),TOROIDX(20),TOROID_POLARITY(20),NTOR
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
      COMMON/POS/LPOS(100,3000),XPOS(100,3000),YPOS(100,3000),
     1PPOS(100,3000),MAXL
      REAL*8 TBEAM,TMU,TDMU,S
      LOGICAL LTOROID
      LOGICAL LFINISH
      INTEGER SOURCE_INDEX(17)/0,       0,    0,    0,    0,
     1    0,    0,2886, 2581, 2500,
     2 1237,1276,1332,1413,1420,1451,1501/
C
C  THIS IS THE SECTION FOR MUONS WHICH HAVE REACHED Z=0
C
      RADIUS= SQRT(X(INDEXC)**2 + Y(INDEXC)**2)
      IF (.NOT.LFINISH) THEN
        NIP=NIP+1
C  BUFFER COORDINATES OF FIRST 100 EVENTS WHICH REACH IP
        IF(NIP.LE.100) THEN
          PBI(NIP)=P(INDEX0)
          PBF(NIP)=P(1)
          XF(NIP)=X0(1)
          YF(NIP)=Y0(1)
          ICH(NIP)=ICHARGE
        END IF
C  THIS SECTION IS FOR MUS THAT HAVE HIT OUTSIDE THE DETECTOR
        DELT=TBEAM-TMU
C       PRINT 1000, TBEAM,TMU,DELT,TDMU
1000    FORMAT(4E20.5)
        IF(RADIUS.GT. 650.0) THEN                                   !LK
          IF(ICHARGE.EQ.1) THEN
            MUPLT=MUPLT+1
          ELSE
            MUMIT=MUMIT+1
          END IF
        END IF
C  THIS SECTION IS FOR MUS THAT HAVE HIT THE DETECTOR
C  6.50 METERS FOR RADIUS OF SMALL DETECTOR IR1
C  10.0 METERS FOR RADIUS OF LARGE DETECTOR IR1
        IF(RADIUS.LE. 650.0) THEN                                   !LK
          IF(ICHARGE.EQ.1) THEN
            MUPLD=MUPLD+1
          ELSE
            MUMID=MUMID+1
          END IF
        END IF
C NUMBER IN TPC, DETECTOR IR1
        IF(RADIUS.LE. 250.0) THEN
          B=15.
          THETA0=ATAN(Y(INDEXC)/X(INDEXC))
          BX=B*COS(THETA0)
          BY=B*SIN(THETA0)
          THETABX=ICHARGE*0.03*BY/P(INDEXC)
          THETABY=ICHARGE*0.03*BX/P(INDEXC)
          THETAX=XPRIME(INDEXC)+THETABX
          THETAY=YPRIME(INDEXC)+THETABY
          THETA=SQRT(THETAX**2 + THETAY**2)
          MUECAL=MUECAL+1
        END IF
        IF(RADIUS.LE. 200.0) THEN
          MUBCAL=MUBCAL+1
        END IF
      END IF
C  THIS IS THE SECTION FOR MUONS THAT HAVE RANGED OUT BEFORE
C  REACHING THE END OF THE LINAC
C  THIS IS THE SECTION FOR MUONS THAT HAVE RANGED OUT IN THE
C  COLLIMATION OR FINAL FOCUS SECTIONS
C
C     PRINT OUT FIRST NDUMP SURVIVING EVENTS
C
C     IF (.NOT.LFINISH.AND.NDUMP.GT.0.AND.RADIUS.LE.650.) THEN
C     IF (.NOT.LFINISH.AND.X(INDEXC).GT. 400.AND.X(INDEXC).LT.
C    1   6000.AND.NDUMP.GT.0) THEN
      IF (.NOT.LFINISH.AND.NDUMP.GT.0) THEN
C     IF (NDUMP.GT.0.AND.INDEXC.LE.3800.AND.INDEXC.
C    1GE.1.AND.
C    2X(INDEXC).GT.-40..AND.X(INDEXC).LT.40.
C    3.AND.Y(INDEXC).LT.100..AND.Y(INDEXC).GT.-20.0) THEN
C  PRINT TRAJ. OF ALL MUONS REACHING Z=340 M
C     IF(INDEXC.LT. 10.AND.X0( 10).GT. 800..AND.NDUMP.GT.0) THEN
C     IF(INDEXC.LT.140.AND.NDUMP.GT.0) THEN
        MAXL=LSTEP
        NDUMP = NDUMP -1
        IF(ICHARGE.EQ.-1) GO TO 20
        NPOS=NPOS+1
        DO 4 I = 1,LSTEP,10                                         !LK
C FIRST COLLECT TRAJECTORIES FOR POSITIVE CHARGE MUONS
C ONLY NEED LZ,XX0, AND YY.  INCLUDE PP TOO
        LPOS(NPOS,I)=LZ(I)
        XPOS(NPOS,I)=XX0(I)
        YPOS(NPOS,I)=YY(I)
        PPOS(NPOS,I)=PP(I)
    4   CONTINUE
C GET FINAL COORDINATES
        I=LSTEP
        LPOS(NPOS,I)=LZ(I)
        XPOS(NPOS,I)=XX0(I)
        YPOS(NPOS,I)=YY(I)
        PPOS(NPOS,I)=PP(I)
        GO TO 30
20    CONTINUE
        DO 5 I = 1,LSTEP,10                                         !LK
            IF(LZ(I).GE.INDEXC)
     *      PRINT 9, LZ(I),XX0(I),YY(I),XX(I),XXPRIME(I),XX0PRIME(I),
     *       XXAXIS(I),XXAXISP(I),PP(I),ICHARGE
    5   CONTINUE
C PRINT FINAL COORDINATES
        IF(ICHARGE.EQ.1) GO TO 30
        I=LSTEP
        PRINT 9, LZ(I),XX0(I),YY(I),XX(I),XXPRIME(I),XX0PRIME(I),
     *    XXAXIS(I),XXAXISP(I),PP(I),ICHARGE
C PRINT TOPDRAW INFORMATION
        PRINT 6
        PRINT 3, LSTEP
      END IF
   30 CONTINUE
C PRINT COORDINATES AT MOUTH OF TUNNEL FOR DETECTOR BKG. STUDY
      IF (.NOT.LFINISH.AND.RADIUS.LE.1000.) THEN
C FOR POSITRON SIDE DON'TCHANGE SIGN OF X(10) AND XPRIME(10)
C SUBTRACT 7 MRAD FROM XPRIME(10) TO PUT INTO DETECTOR COORD.
C ADD 7 CM TO X(10) TO PUT INTO DETECTOR COORD.
C CHANGE SIGN OF CHARGE
        X(10)=X(10)+7.0
        XPRIME(10)=XPRIME(10)-0.007
            if(icharge.eq.1) then
               icharge=-1
               go to 10
            end if
            if(icharge.eq.-1) then
               icharge=1
            end if
10    continue
        WRITE(95,8) X(10),Y(10),XPRIME(10),YPRIME(10),P(10),DELT,
     *ICHARGE,INDEX0
      END IF
C
    1 FORMAT(' (INDEX       X0       Y         X0P      YP      P
     1X_REL', '   CHARGE = ',I3,')')
C X_REL IS THE DISTANCE FROM THE BEAM AXIS IN THE HORIZONTAL PLANE = XX(I)
    2 FORMAT(I6,3X,2F9.3,3X,2F8.4,F8.3)
    3 FORMAT('(STEPS =  ',I6,')')
    6 FORMAT('JOIN 1')
    7 FORMAT(I6,3X,2F9.3,3X,2F10.7,F8.3,F9.3)
    8 FORMAT(2F10.1,2F10.5,F10.1,F10.2,I5,I5)
    9 FORMAT(I6,3X,3F9.3,3X,2F11.7,F9.3,F11.7,F8.3,I5)
500   FORMAT(' (INDEX       X0       Y         XX         XP       X0P
     1      XAXIS      XAXISP    P', ' CHARGE = ',I3,')')
C
      RETURN
      END
C
C
      SUBROUTINE IRON(XMETER)                                     !LK
      CALL PLOSS(2,787.0*XMETER)                                  !LK
      CALL SCATT(55.55*XMETER)                                    !LK
      RETURN
      END
C
      SUBROUTINE LEAD(XMETER)                                     !LK
      CALL PLOSS(3,1130.*XMETER)                                  !LK
      CALL SCATT(178.58*XMETER)                                   !LK
C
      RETURN
      END
C
C
      SUBROUTINE PLOSS(IABSOR,GRAMS)
C
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
C     THIS ROUTINE TAKES A MUON INCOMING
C     MOMENTUM <PIN> AND GENERATES THE OUTGOING MOMENTUM <POUT>
C     AFTER THE PARTICLE HAS PASSED THRU <GRAMS> GRAMS OF ABSORBER
C     OF TYPE <IABSOR>.
C
C             <IABSOR>:: 1=ALUMINUM, 2=IRON, 3=LEAD
C
      DIMENSION A1(3),B1(3),A2(3),B2(3)
      DATA A1/.1881E-02,.1715E-02,.1383E-02/
      DATA B1/.1461E-04,.1715E-04,.2372E-04/
      DATA A2/.2401E-02,.2317E-02,.2263E-02/
      DATA B2/.4767E-05,.7994E-05,.1819E-04/
      DATA AMASS/.10566/
C
C     PRINT 99, P(INDEXC)
C99   FORMAT(T2,'P(INDEXC) IN PLOSS=',E10.4)
      PIN=P(INDEXC)
C
C     FIRST FIND THE KINETIC ENERGY
C
      EIN = SQRT(PIN**2 + AMASS**2) - AMASS
C
C FIND THE DE/DX WHICH CORRESPONDS TO THIS ENERGY
      IF (EIN.GE.50.) GO TO 2
      DELTAE=(A1(IABSOR) + B1(IABSOR)*(EIN-1.))*GRAMS
      GO TO 4
    2 CONTINUE
      DELTAE=(A2(IABSOR) + B2(IABSOR)*(EIN-50.))*GRAMS
    4 CONTINUE
      EOUT=EIN-DELTAE
      IF(EOUT.GT.0.001) THEN
        P(INDEXC)=SQRT((EOUT+AMASS)**2-AMASS**2)
      ELSE
        P(INDEXC) = 0.290
      END IF
C
      RETURN
      END
      SUBROUTINE PRINTOUT
C
C    CALL HOUT('ALL ','PRINTER ')
C      CALL NARGSET(2)
C      CALL HWRITE(0,40)
C      CALL HWRITE(0,99)
C      CALL HCLR('ALL ')
C
      RETURN
      END
C
      SUBROUTINE QUAD(IMAG)
C
C     ROUTINE TO SIMULATE QUADRUPOLE MAGNETS
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
      COMMON/BEAM/EBEAM
C
C
C     THE QUADRUPOLES FALL INTO SIX CLASSES:
C
C CLASSES 1 AND 2 ARE SMALL BORE SIMILIAR TO THE FINAL DOUBLET
C CLASS 3 IS A COPY OF Q19-25 IN THE SLC FF
C CLASSES 4 AND 6 ARE COPIES OF Q15-16 IN THE SLC FF. CLASS 6 IS
C   USED IN THE ACCELERATOR
C CLASS 5 IS NOT USED
C
C     FIELD IS THE MAGNETIC FIELD AT THE POLE TIP IN KG; POSITIVE
C       FOCUSES A NEGATIVE PARTICLE HORIZONATALLY.  THE FIELDS
C       GIVEN HERE ARE FOR A 500 GEV ELECTRON BEAM
C     LENGTH IS THE LENGTH OF THE MAGNET IN METERS                  !LK
C  FUDGE IS A FACTOR TO CORRECT EACH MAGNET TO AN INTEGRAL # OF M   !LK
C     RADIUS IS THE RADIUS OF THE POLE TIP IN CENTIMETERS           !LK
C     MAX_RADIUS IS THE RADIUS OF THE MAXIMUM QUAD FIELD
C     GAP_WIDTH IS THE HALF-WIDTH AT WHICH THE FULL COIL GAP STARTS
C     CUTOUT_WIDTH IS THE HALF-WIDTH AT WHICH THE CUTOUT CORNER STARTS
C                  (START OF NO-FIELD REGION FOR SOLID MAGNETS)
C     COIL_WIDTH IS THE HALF-WIDTH AT WHICH THE COIL ENDS
C     IRON_WIDTH IS THE HALF-WIDTH OF THE IRON
C     GAP_HEIGHT IS THE HALF-HEIGHT OF THE MINIMUM GAP
C     COIL_HEIGHT IS THE HALF-HEIGHT OF THE COIL
C     CUTOUT IS TRUE FOR A LAMINATED (CROSS SHAPED) MAGNET
C     COIL_FACTOR IS THE FIELD AT THE START OF THE COIL TO MAX
C     POLE_FACTOR IS THE POLE REGION FIELD COMPARED TO THE MAX
C     SIDE_FACTOR IS THE SIDE RETURN FIELD COMPARED TO THE MAX
C     END_FACTOR IS THE END RETURN FIELD COMPARED TO THE MAX
C
      REAL FIELD(120)/-11.796,-0.3392,7.65,   -7.256,  1.974,     !45
     2            -4.38200, -5.11,    5.134,   5.022,   3.4784,
     3           -8.0832, 10.1908,-3.029,-9.3678,2.5128,          !55
     4           -1.8234,-1.438,   1.795,-2.7784, 1.781,
     5            1.796,  -1.3878, 0.13302, 1.7442, -1.8116,       !65
     6          -5.106,   -0.204,  -3.658,   1.856,  -1.462,
     7               3.953,   4.714,   -4.714,  -1.236,  -2.350,   !75
     8               3.860,  -5.327,    3.678,   -5.059, -5.662,
     9               4.365,   4.735,   -4.735,    8.254, -8.254,   !85
     3             -6.920,   -3.995,     5.604,  -6.229,  7.636,
     4             -4.446,    6.100,     5.389,  -8.990,  5.610,   !95
     5              2.093,   -7.123,    4.614,   5.432,  10.247,
     6              -2.820,  11.801,   -8.791,   3.254,   1.552,
     7              -8.412,  11.179,  -11.909,  12.866, -12.866,
     8              10.837,  -9.238,    7.512,   -9.271, 10.166,
     9              -9.167,  9.167,     10.,       10.,  10.,
     *40*10./
C     REAL LENGTH(45)/ 1.982,    1.982,    1.982,   1.982,   4.267, !50
C    2                 4.267,    4.267,    1.982,   1.982,   1.982, !55
C    3                 2.000,    2.000,    2.000,   2.000,   1.00,  !60
C    4                 1.00,     1.000,    1.000,   1.000,   1.000, !65
C    5                 2.00,     2.000,    2.000,   2.000,   2.000, !70
C    6                 2.000,    4.250,    4.250,   2.000,   2.000, !75
C    7                 2.000,    2.000,    2.000,   2.000,   2.00,  !80
C    8                 4.25,     1.000,    1.000,   1.000,   1.000, !85
C    9                 0.50,     0.500,    0.500,   0.500,   0.500/ !90
C    *                 8.0,      4.25,
C     NOM._LENGTH(45)/ 2         2         2        2        4      !50
C    2                 4         4         2        2        4      !55
C    3                 2         2         2        2        1      !60
C    4                 1         1         1        1        1      !65
C    5                 2         2         2        2        2      !70
C    6                 2         4         4        2        2      !75
C    7                 2         2         2        2        2      !80
C    8                 4         1         1        1        1      !85
C    9                 1         1         1        1        1      !90
      REAL FUDGE(120)/0.75,1.0,0.75,0.75,1.0,                 !45
     2               0.75,1.0,0.75,1.0,1.0,                   !50
     3               5*1.00,                                  !55
     4               1.00, 1.00, 1.00, 1.00, 1.00,            !60
     5               1.00, 1.00, 1.00, 1.00, 1.00,     !65
     6               1.00, 1.00, 1.00, 1.00, 1.00,     !70
     7               1.00, 1.00, 1.00, 1.00, 1.00,
     8               1.00, 1.00, 1.00, 1.00, 1.00,      !80
     9             1.0625, 1.00, 1.00, 1.00, 1.00,      !85
     3               1.00, 1.00, 1.25, 1.25, 1.25,      !90
     5               1.00, 1.0625, 1.25, 1.25, 1.25,    !95
     4               1.25, .500, .500, .500, 1.00,
     5               1.00, 1.00, 1.00, 1.00, 1.00,
     6               1.00, 1.00, 1.00, 1.00, 1.00,                              !110
     7               1.00, 1.00, 1.00, 1.00, 1.00,
     8               1.00, 1.00, 1.00, 1.00, 1.00,                              !120
     *40*1./                                                                    !
      INTEGER CLASS(120)/4, 4, 4, 4, 4,    !45
     2                  4, 4, 4, 3, 3,     !50
     3                  3, 3, 3, 3, 3,     !55
     4                  3, 3, 3, 3, 3,     !60
     5                  3, 3, 3, 3, 3,     !65
     6                  3, 3, 3, 3, 3,     !70
     7                  2, 3, 3, 3, 3,     !75
     8                  3, 3, 3, 3, 3,     !80
     9                  3, 6, 6, 4, 4,     !85
     3                  2, 2, 2, 2, 2,     !90
     4                  3, 3, 2, 2, 2,     !95
     5                  2, 1, 1, 1, 3,     !100
     6                  3, 2, 2, 2, 2,     !105
     7                  2, 2, 2, 2, 2,     !110
     8                  2, 2, 2, 2, 2,     !115
     8                  2, 2, 2, 2, 2,     !120
     *                           40*2/
      REAL RADIUS(6)/      0.80,0.60,1.00,1.27,1.60,12.0/            !LK
      REAL MAX_RADIUS(6)/  1.00,0.80,1.20,1.60,1.90,14.00/              !LK
      REAL GAP_WIDTH(6)/   3*2.72,4.00,4.00,16.00/           !LK
      REAL CUTOUT_WIDTH(6)/1.27,2.03,3.96,6.35,6.35,10.0/           !LK
      REAL COIL_WIDTH(6)/  3*7.90,7.90,7.90,20.0/                 !LK
      REAL IRON_WIDTH(6)/  3*18.81,18.81,18.81,24.0/     !LK
      REAL GAP_HEIGHT(6)/  6*0.330/                             !LK
      REAL COIL_HEIGHT(6)/ 3*0.819,1.10,1.700,6.70/         !LK
C     LOGICAL CUTOUT(6)/   F,      F,      F,      F,      F,     F/
      REAL COIL_FACTOR(6)/ 6*.50/
      REAL POLE_FACTOR(6)/ 6*1.0/
      REAL SIDE_FACTOR(6)/ 6*0.50/
      REAL END_FACTOR(6)/  6*0.50/
      LOGICAL INIRON
C
C
C     TO SAVE TIME, EXIT IF NOT IN MAGNET IRON OR JUST IN CUTOUT REGION
C
      XC = X(INDEXC)
      YC = Y(INDEXC)
      AXC = ABS(XC)
      AYC = ABS(YC)
      IC = CLASS(IMAG)
      IF (AXC.GT.IRON_WIDTH(IC).OR.AYC.GT.IRON_WIDTH(IC)) THEN
        CALL GIRDER
        RETURN
      END IF
C NOV 2015, SKIP TEST FOR CUTOUT, ASSUME ILC QUADS ARE SQUARE
C     IF (AXC.GT.CUTOUT_WIDTH(IC).AND.AYC.GT.CUTOUT_WIDTH(IC)) THEN
C       IF (CUTOUT(IC)) THEN
C         RETURN
C       ELSE
C         CALL IRON(FUDGE(IMAG)*IZ)                                !LK
C         RETURN
C       END IF
C     END IF
C
C     CALCULATE MAXIMUM BEND ANGLE FOR 1 GEV PARTICLE = BEND
C     SCALE FIELD TO EBEAM. FIELD(IMAG) IS FOR 500 GEV
C
      ISIDE=1
      BEND = 0.03*IZ*FIELD(IMAG)*(EBEAM/500.)*FUDGE(IMAG)*ISIDE
     1 *MAX_RADIUS(IC)/RADIUS(IC)                                   !LK
C
C     LET UC BE ABS VAL OF LARGER COORD AND VC BE ABS VAL OF SMALLER
C
      UC = AMAX1(AXC,AYC)
      VC = AMIN1(AXC,AYC)
C
C     START IN CENTER AND WORK OUT
C
C     EXTENDED MAGNETIC GAP (FOCUS HORIZONTALLY)
C
      RC = SQRT(XC**2 + YC**2)
      IF (RC.LT.MAX_RADIUS(IC)) THEN
        UG = SQRT(MAX_RADIUS(IC)**2 - GAP_HEIGHT(IC)**2)
        INIRON = VC.GT.GAP_HEIGHT(IC) + (UG - UC)*
     1   (0.7071*RADIUS(IC)  - GAP_HEIGHT(IC))/(UG - 0.7071*RADIUS(IC))
        IF (INIRON) CALL IRON(FUDGE(IMAG)*IZ/2.)                    !LK
        BEND=BEND/P(INDEXC)
        XPRIME(INDEXC)=  XPRIME(INDEXC)+ICHARGE*BEND*XC/MAX_RADIUS(IC)
C       IF(IMAG.EQ.22.OR.IMAG.EQ.23) XPRIME(INDEXC)=XPRIME(INDEXC)
C    1  -ICHARGE*BIGBEND*IZ*EBEAM/P(INDEXC)
        YPRIME(INDEXC)=  YPRIME(INDEXC)-ICHARGE*BEND*YC/MAX_RADIUS(IC)
C DEBUG
C       WRITE(6,100)XC,YC,XPRIME(INDEXC),YPRIME(INDEXC),INDEXC
100     FORMAT('100',4F10.5,I10)
        IF (INIRON) CALL IRON(FUDGE(IMAG)*IZ/2.)                    !LK
        RETURN
      END IF
C
C     AIR GAP BEYOND MAX_RADIUS (BEND IN PLANE)
C
      IF (UC.LT.GAP_WIDTH(IC).AND.GAP_WIDTH(IC).NE.MAX_RADIUS(IC)) THEN
        UG = SQRT(MAX_RADIUS(IC)**2 - GAP_HEIGHT(IC)**2)
        INIRON = VC.GT.COIL_HEIGHT(IC) - (GAP_WIDTH(IC) - UC)*
     1   (COIL_HEIGHT(IC) - GAP_HEIGHT(IC))/(GAP_WIDTH(IC) - UG)
        IF (.NOT.INIRON) THEN
          FACTOR = COIL_FACTOR(IC) + (GAP_WIDTH(IC) - UC)*
     1     (1. - COIL_FACTOR(IC))/(GAP_WIDTH(IC) - UG)
          BEND = BEND*FACTOR/P(INDEXC)
          IF (UC.EQ.AXC) THEN
            XPRIME(INDEXC) = XPRIME(INDEXC) + ICHARGE*BEND*SIGN(1.,XC)
          ELSE
            YPRIME(INDEXC) = YPRIME(INDEXC) - ICHARGE*BEND*SIGN(1.,YC)
          END IF
          RETURN
        END IF
      END IF
C
C     PRINT 99, X(INDEXC),Y(INDEXC),P(INDEXC)
C99   FORMAT(T2,'QUAD LOC2  ',3E10.4)
C     COIL (BEND IN PLANE)
C
      IF (UC.LT.COIL_WIDTH(IC).AND.UC.GT.GAP_WIDTH(IC).AND.
     1 VC.LT.COIL_HEIGHT(IC)) THEN
        CALL COPPER(FUDGE(IMAG)*IZ/2.)                            !LK
        FACTOR = COIL_FACTOR(IC)*(COIL_WIDTH(IC) - UC)/
     1 (COIL_WIDTH(IC) - GAP_WIDTH(IC))
        BEND = BEND*FACTOR/P(INDEXC)
        IF (UC.EQ.AXC) THEN
          XPRIME(INDEXC) = XPRIME(INDEXC) + ICHARGE*BEND*SIGN(1.,XC)
        ELSE
          YPRIME(INDEXC) = YPRIME(INDEXC) - ICHARGE*BEND*SIGN(1.,YC)
        END IF
        CALL COPPER(FUDGE(IMAG)*IZ/2.)                            !LK
        RETURN
      END IF
C
C     EVERYTHING LEFT IS IRON, SO CALL HALF NOW AND HALF LATER
C
      CALL IRON(FUDGE(IMAG)*IZ/2.)                                 !LK
C
C     POLE REGION (BEND IN BOTH PLANES)
C
      IF (AXC.LT.CUTOUT_WIDTH(IC).AND.AYC.LT.CUTOUT_WIDTH(IC)) THEN
        BEND = 0.7071*BEND*POLE_FACTOR(IC)/P(INDEXC)
        XPRIME(INDEXC) = XPRIME(INDEXC) + ICHARGE*BEND*SIGN(1.,XC)
        YPRIME(INDEXC) = YPRIME(INDEXC) - ICHARGE*BEND*SIGN(1.,YC)
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
      END IF
C
C     SIDE REGION (BEND OUT OF PLANE)
C
      IF (UC.LT.COIL_WIDTH(IC)) THEN
        BEND = BEND*SIDE_FACTOR(IC)/P(INDEXC)
        IF (VC.EQ.AXC) THEN
          XPRIME(INDEXC) = XPRIME(INDEXC) + ICHARGE*BEND*SIGN(1.,XC)
        ELSE
          YPRIME(INDEXC) = YPRIME(INDEXC) - ICHARGE*BEND*SIGN(1.,YC)
        END IF
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
      END IF
C
C     END REGION (BEND IN PLANE, BUT DEFOCUS)
C
      IF (VC.LT.COIL_HEIGHT(IC)) THEN
        BEND = BEND*END_FACTOR(IC)/P(INDEXC)
        IF (UC.EQ.AXC) THEN
          XPRIME(INDEXC) = XPRIME(INDEXC) - ICHARGE*BEND*SIGN(1.,XC)
        ELSE
          YPRIME(INDEXC) = YPRIME(INDEXC) + ICHARGE*BEND*SIGN(1.,YC)
        END IF
        CALL IRON(FUDGE(IMAG)*IZ/2.)                               !LK
        RETURN
      END IF
C
C     CORNER RETURN REGION (BEND IN BOTH PLANES, BOTH DEFOCUSING)
C     THIS IS THE ONLY REGION LEFT
C
      BENDU = 0.7071*BEND*END_FACTOR(IC)/P(INDEXC)
      BENDV = 0.7071*BEND*SIDE_FACTOR(IC)/P(INDEXC)
      IF (UC.EQ.AXC) THEN
        XPRIME(INDEXC) = XPRIME(INDEXC) - ICHARGE*BENDU*SIGN(1.,XC)
        YPRIME(INDEXC) = YPRIME(INDEXC) - ICHARGE*BENDV*SIGN(1.,YC)
      ELSE
        XPRIME(INDEXC) = XPRIME(INDEXC) + ICHARGE*BENDV*SIGN(1.,XC)
        YPRIME(INDEXC) = YPRIME(INDEXC) + ICHARGE*BENDU*SIGN(1.,YC)
      END IF
      CALL IRON(FUDGE(IMAG)*IZ/2.)                                 !LK
C
      RETURN
      END
C
      SUBROUTINE LIGHT_SANDSTONE(XMETER)                                  !LK
C BELOW IS VERY LOW DENSITY SANDSTONE
      CALL PLOSS(1,2.2*XMETER)                                    !LK
      CALL SCATT(0.480*XMETER)                                      !LK
C
      RETURN
      END
C
      SUBROUTINE SANDSTONE(XMETER)                                  !LK
      CALL PLOSS(1,210.2*XMETER)                                    !LK
      CALL SCATT(7.480*XMETER)                                      !LK
C BELOW IS VERY LOW DENSITY SANDSTONE
C     CALL PLOSS(1,2.2*XMETER)                                    !LK
C     CALL SCATT(0.480*XMETER)                                      !LK
C
      RETURN
      END
C
      SUBROUTINE SCATT(RL)
C
C     THIS ROUTINE SCATTERS THE PARTICLE FOR RADIATION LENGTH RL
C
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      SIGMA = 0.015*SQRT(RL)/P(INDEXC)
      XPRIME(INDEXC) = GAUSS(SIGMA,XPRIME(INDEXC))
      YPRIME(INDEXC) = GAUSS(SIGMA,YPRIME(INDEXC))
C
      RETURN
      END
C
      SUBROUTINE CONCRETE_WALL
C
C     ROUTINE TO HANDLE THE NEUTRON/PHOTON SHIELD
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      COMMON/XTUNNEL/D0,D1,RTUNNEL,XBEAM,XREF,XWALLLT(10000),
     1XOFFSET(10000),YOFFSET,YFLOOR,XFLOOR,XWALLRT(10000),TWALL,
     2XWALLLT1(10000),XWALLRT1(10000),AXISLE(10000),AXISD(10000)
      LOGICAL LTUNNEL
C
C CHECK VERTICAL FIRST
          IF(Y(INDEXC).GT.(RTUNNEL+D1+TWALL)
     1    .OR.Y(INDEXC).LT.-1.*(YFLOOR+TWALL)) THEN
            CALL GRANITE(1.*IZ)
            GO TO 10
          END IF
          IF(Y(INDEXC).GT.(RTUNNEL+D1).OR.Y(INDEXC).LT.
     1    -YFLOOR) THEN
            CALL CONCRETE(1.*IZ)
            GO TO 10
          END IF
C DONE WITH VERTICAL
C NOW HORIZONAL
C FIRST CHECK IF OUTSIDE TUNNEL
          IF(X0(INDEXC).LT.(XWALLLT(INDEXC)-TWALL).OR.X0(INDEXC)
     1    .GT.(XWALLRT(INDEXC)+TWALL)) THEN
            CALL GRANITE(1.*IZ)
            GO TO 10
          END IF
          IF(X0(INDEXC).LT.XWALLLT(INDEXC).OR.X0(INDEXC)
     1    .GT.XWALLRT(INDEXC)) THEN
            CALL CONCRETE(1.*IZ)
            GO TO 10
          END IF
C CHECK WITHIN PASSAGE WAY
      IF(X0(INDEXC).LT.(XWALLLT(INDEXC)+200.)) GO TO 10
      IF(X0(INDEXC).GT.(XWALLRT(INDEXC)-500.)) GO TO 10
C CHECK WITHIN BEAM PIPE, BEAM PIPE OPENING 2 CM SQUARE
      IF(ABS(X(INDEXC)).LT.2.00.AND.ABS(Y(INDEXC)).LT.2.00) RETURN
C NOW WITHIN WALL
      CALL CONCRETE(1.*IZ)
C
10    CONTINUE
      RETURN
      END
C
      SUBROUTINE ABSORBER
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
C
      RC=SQRT(X(INDEXC)**2 + Y(INDEXC)**2)
      IF(RC.LT.0.40) RETURN
      IF(RC.GT.10.0) RETURN
C 30 RL = 0.429 M
      CALL COPPER(0.429*IZ)
C
      RETURN
      END
C
      SUBROUTINE COLLIMATOR
C
C     ROUTINE TO HANDLE THIRD SHIELDING WALL
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
C
C
      RC=SQRT(X(INDEXC)**2 + Y(INDEXC)**2)
      IF(RC.LT.0.50) RETURN
      IF(RC.GT.10.0) RETURN
C 30 RL = 0.429 M
      CALL COPPER(0.429*IZ)
      RETURN
      END
C
      SUBROUTINE SHIELDING_WALL4                                   !LK
C
C     ROUTINE TO HANDLE SHIELDING WALL FOUR
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      RETURN
      END
C
      SUBROUTINE SHIELDING_WALL5                                    !LK
C
C     ROUTINE TO HANDLE SHIELDING WALL FIVE
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      RETURN
      END
C
      SUBROUTINE SHIELDING_WALL6                                   !LK
C
C     ROUTINE TO HANDLE SHIELDING WALL SIX
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      RETURN
      END
C
      SUBROUTINE SLAC_TOROID(I,JTYPE)
C
C     ROUTINE TO INSERT A SLAC-BUILT MUON SPOILERS. TWENTY TYPES
C     ARE AVAILABLE, 1 - 20.  ALL ARE RECTANGULAR
C
C     TYPES 1 AND 2 ARE MEANT TO BE SIDE-BY-SIDE IN THE TUNNEL ON
C     EITHER SIDE OF THE BEAM LINE. THEY ARE MEANT TO HAVE THE
C     SAME POLARITY SO THAT THE STRAY FIELD IN THE BEAM REGION
C     IS SMALL.
C
C     TYPES 3,4,5,6,7,8 ARE MEANT TO BE IN PAIRS,
C     WHERE 3/4,5/6 AND 7/8 ARE THE
C     LEFT/RIGHT HALVES
C     THE LEFT AND RIGHT HALVES SHOULD HAVE OPPOSITE POLARITY.
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTOROID/LTOROID(20),ITOROID_TYPE(20),ITOROID_BEGIN(20),
     1 ITOROID_LENGTH(20),TOROIDX(20),TOROID_POLARITY(20),NTOR
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
C     COMMON/XTUNNEL/D0,D1,RTUNNEL,XBEAM,XREF,XWALLLT(10000),
C    1XOFFSET(10000),YOFFSET,YFLOOR,XFLOOR,XWALLRT(10000),TWALL,
C    2XWALLLT1(10000),XWALLRT1(10000),AXISLE(10000),AXISD(10000)
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
      LOGICAL LTOROID
C
C     WIDTH FOR BEAM HEIGHT 40 CM, BEAM RIGHT SIDE OF TUNNEL
C
C     REAL WIDTH(10)/147.625,65.775,177.625,95.775,
C    1 179.625,97.775,4*30./ !LK
C
C     WIDTH FOR BEAM HEIGHT 75 CM, BEAM RIGHT SIDE OF TUNNEL
C
C     REAL WIDTH(10)/156.6,  56.8,  186.6,  86.8,
C    1 188.6,  88.8,  4*30./ !LK
C
      REAL HEIGHT(20)/20*250./     !HEIGHT FOR SQUARE 5M TUNNEL
C     REAL HEIGHT(20)/20*200./     !HEIGHT FOR 4M high spoiler
C     REAL HEIGHT(20)/20*166.10/   !HEIGHT FOR ROUND TUNNEL, R=200.0
C     REAL HEIGHT(20)/20*181.00/   !HEIGHT FOR ROUND TUNNEL, R=213.4
C     REAL HEIGHT(20)/20*196.30/   !HEIGHT FOR ROUND TUNNEL, R=225.0
      REAL SLOT_WIDTH(20)/20*1.5/         !LK
      REAL SLOT_HEIGHT(20)/20*36.0/    !LK
C
C   WIDTH FOR BEAM LEFT SIDE OF TUNNEL, SEE MUCARLO BOOK2, P.53
C     REAL WIDTH(20)/193.4, 203.4,142.55, 84.4, 90.0, 100.0,
      REAL WIDTH(20)/193.4, 203.4,217.55, 84.4, 90.0, 100.0,
     *193.4, 203.4, 80.0, 90.0, 80.0, 193.4, 8*10./
C
C  offsets in 112815.mortran, 5M WIDE TUNNEL, SPOILERS 3 AND 4
C OFFSET of #3 leaving 1 m space at left wall
C     REAL XOFFSET(20)/ 194.4, 204.4,143.55, -85.4, -91.0, -101.0,
      REAL XOFFSET(20)/ 194.4, 204.4,218.55, -85.4, -91.0, -101.0,
     *194.4, 204.4, -81.0, -91.0, 1691.0, 1415.8, 8*10./
C
C  offsets below are for 9 or 18m winding slots aligned
C  this is for 121704.mortran
C     REAL XOFFSET(20)/   0.0,   0.0, 193.4, -80.0,193.4, -80.0,
C    *1239.0,1514.0,12*0.0/
C
C  offsets below are for 9 or 18m winding slots aligned
C  this is for 082906.mortran
C     REAL WIDTH(20)/0.0, 0.0, 200.0, 60.0,  0.0,   0.0,
C    * 180.0,  80.0,12*0.0/
C     REAL XOFFSET(20)/   0.0,   0.0, 200.0, -60.0,  0.0,   0.0,
C    *2142.7,2402.7,12*0.0/
C
C     YOFFSET FOR BEAM HEIGHT 110 CM
      REAL YOFFSET(20)/20*140.00/  !YOFFSET FOR 5M SQUARE TUNNEL
C     REAL YOFFSET(20)/20*90.00/  !YOFFSET FOR 4M High spoilers
C     REAL YOFFSET(20)/20* 91.1/  !YOFFSET FOR ROUND TUNNEL, R=200.0
C     REAL YOFFSET(20)/20*106.0/  !YOFFSET FOR ROUND TUNNEL, R=213.4
C     REAL YOFFSET(20)/20*121.3/  !YOFFSET FOR ROUND TUNNEL, R=225.0
      REAL BLKSIZE(20)/20*27./
C
C     FUDGE REPRESENTS THE DIFFERENCE BETWEEN THE TRUE LENGTH AND THE
C     NOMINAL LENGTH
C
      REAL FUDGE(20)/20*1.00/
C
C     THE FOLLOWING FIELDS ARE THE AVERAGE FIELDS FOR 120 A
C
      REAL FIELD(20)/0.,0.,15.2,15.2,0.00,0.00,15.2,15.2,12*0.0/
C     REAL FIELD(20)/0.,0., 0.0, 0.0,0.0, 0.0, 0.,   0.0,12*0.0/
C
C     FIELD LOOK-UP IN UNITS OF FIELD
C
      REAL FIELD_MAP1(8,8)/1.16,1.10,1.08,1.05,1.05,1.04,1.04,1.04,
     1                    1.03,1.03,1.03,1.03,1.02,1.02,1.01,1.01,
     2                    0.98,0.96,0.95,0.95,0.95,0.95,0.95,0.95,
     3                    0.97,0.93,0.89,0.86,0.86,0.86,0.86,0.86,
     4                    0.96,0.91,0.85,0.81,0.75,0.75,0.75,0.75,
     5                    0.96,0.91,0.84,0.75,0.68,0.63,0.57,0.57,
     6                    0.96,0.91,0.83,0.72,0.59,0.47,0.40,0.40,
     7                    0.95,0.90,0.82,0.72,0.56,0.39,0.20,0.12/
      REAL FIELD_MAP2(8,8)/1.16,1.10,1.08,1.05,1.05,1.04,1.04,1.04,
     1                    1.03,1.03,1.03,1.03,1.02,1.02,1.01,1.01,
     2                    0.98,0.96,0.95,0.95,0.95,0.95,0.95,0.95,
     3                    0.97,0.93,0.89,0.86,0.86,0.86,0.86,0.86,
     4                    0.96,0.91,0.85,0.81,0.75,0.75,0.75,0.75,
     5                    0.96,0.91,0.84,0.75,0.68,0.63,0.57,0.57,
     6                    0.96,0.91,0.83,0.72,0.59,0.47,0.40,0.40,
     7                    0.95,0.90,0.82,0.72,0.56,0.39,0.20,0.12/
C
      ITYPE = JTYPE
C
      XPC=XPRIME(INDEXC)
      YPC=YPRIME(INDEXC)
      W = WIDTH(ITYPE)
      H = HEIGHT(ITYPE)
      SLW = SLOT_WIDTH(ITYPE)
      SLH = SLOT_HEIGHT(ITYPE)
C TRANSFORM TO TOROID COORDINATES
C
      XC = X(INDEXC) - XOFFSET(ITYPE)
      YC = Y(INDEXC) - YOFFSET(ITYPE)
      AXC = ABS(XC)
      AYC = ABS(YC)
      IF (AXC.GT.W.OR.AYC.GT.H) RETURN
C
C     SLOT REGION
C
      IF (AXC.LT.SLW.AND.AYC.LT.SLH) THEN
        IF (AXC.LT.0.10) THEN                                   !LK
          RETURN
        ELSE
          CALL CONDUCTOR(FUDGE(ITYPE)*ISTEP)                        !LK
        END IF
      END IF
C
C     CALCULATE MAXIMUM BEND ANGLE FOR 1 GEV PARTICLE IN CENTRAL FIELD
C     IF POLARITY IS POSITIVE, THE FIELD IS COUNTER CLOCKWISE
C     LOOKING DOWNSTREAM.  THIS CAUSES MU- TO BE FOCUSSED
C
      BEND = .03*ISTEP*FIELD(ITYPE)*TOROID_POLARITY(I)*
     1ICHARGE*FUDGE(ITYPE)                                          !LK
C
C     HORIZONTAL REGION
C
      IF (AYC.LT.SLH) THEN
        CALL IRON(FUDGE(ITYPE)*ISTEP/2.)                            !LK
        XPRIME(INDEXC) = XPC            + BEND*SIGN(1.,XC)/P(INDEXC)
        CALL IRON(FUDGE(ITYPE)*ISTEP/2.)                            !LK
        RETURN
      END IF
C
C     QUADRANT REGION
C
C     USE A LOOK-UP TABLE IN BLKSIZE INCH BLOCKS
C
        CALL IRON(FUDGE(ITYPE)*ISTEP/2.)                           !LK
      AYC = AYC - SLH
      RC = SQRT(AXC**2 + AYC**2)
      FX = AXC/RC
      FY = AYC/RC
      IX = AXC/BLKSIZE(ITYPE) + 1
      IY = AYC/BLKSIZE(ITYPE) + 1
      BEND = BEND*FIELD_MAP1(IX,IY)/P(INDEXC)
      XPRIME(INDEXC) = XPC            + BEND*SIGN(1.,XC)*FX
      YPRIME(INDEXC) = YPC            + BEND*SIGN(1.,YC)*FY
        CALL IRON(FUDGE(ITYPE)*ISTEP/2.)                           !LK
C     PRINT 10, AXC,AYC,IX,IY,BLKSIZE(ITYPE),FIELD_MAP(IX,IY)
10    FORMAT('SUBROUTINE SLAC',2F10.3,2I5,2F10.5)
C
      RETURN
      END
C
      SUBROUTINE SPECTRUM(ENER)
C
C     ENER IS THE BEAM ENERGY CORRESPONDING TO ISOURCE
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL ENER               ! WRN-LK---added for UNIX
C     DIMENSION GTL(750)
C     COMMON/HISTORY/Z(10000),X(10000),
C    1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/MUDIST/P_THETA_DIST(750,70)
      COMMON/WEIGHT/WEIMU
      REAL WEIMU              ! WRN-LK---added for UNIX
      COMMON/MP/PMIN
      DIMENSION THETAMAX(750)
      DIMENSION YTL(250),XTL(750)
C     COMMON/THETA/THETAMAX(750)
      REAL*8 P_THETA_DIST 
C     REAL*8 THETAMAX
      REAL PMIN               ! WRN-LK---added for UNIX
      REAL SIGMA(750)/750*0.0/
C  THIS IS THE PHOTON TRACK LENGTH IN UNITS OF CM/GEV
C  FOR A 250 GEV POSITRON BEAM INCIDENT ON 0.6 RL OF COPPER
      REAL GTL(750)/
     * 0.975,0.196,0.120,0.086,0.067, 0.055,0.046,0.039,0.035,0.031,
     1 0.0278,0.0255,0.0233,0.0212,0.0197,       !15
     1 0.0181,0.0171,0.0160,0.0150,0.0141,       !20
     2 0.0133,0.0127,0.0120,0.0115,0.0109,       !25
     2 0.0104,0.0100,0.0095,0.0092,0.0087,       !30
     3 0.0084,0.0080,0.0077,0.0075,0.0073,
     3 0.0070,0.0069,0.0066,0.0063,0.0062,       !40
     4 0.0061,0.0058,0.0057,0.0055,0.0054,
     4 0.0052,0.0051,0.0050,0.0049,0.0046,       !50
     5 0.0046,0.0045,0.0044,0.0043,0.0042,
     5 0.0041,0.0040,0.0039,0.0038,0.0038,       !60
     6 0.0036,0.0037,0.0036,0.0035,0.0033,
     6 0.0033,0.0032,0.0032,0.0032,0.0031,       !70
     7 0.0031,0.0029,0.0029,0.0029,0.0028,
     7 0.00280,0.00270,0.00265,0.00263,0.00258,  !80
     8 0.00256,0.00244,0.00248,0.00239,0.00238,
     8 0.00227,0.00231,0.00225,0.00224,0.00215,  !90
     9 0.00216,0.00213,0.00214,0.00204,0.00204,
     9 0.00194,0.00197,0.00199,0.00188,0.00193,  !100
     * 0.00191,0.00191,0.00179,0.00185,0.00180,
     * 0.00178,0.00174,0.00177,0.00173,0.00170,
     1 0.00170,0.00162,0.00168,0.00164,0.00162,
     1 0.00158,0.00154,0.00154,0.00156,0.00147,  !120
     2 0.00157,0.00145,0.00150,0.00144,0.00143,
     2 0.00139,0.00135,0.00140,0.00139,0.00138,  !130
     3 0.00136,0.00129,0.00130,0.00133,0.00128,
     3 0.00127,0.00125,0.00127,0.00119,0.00121,  !140
     4 0.00123,0.00117,0.00114,0.00119,0.00117,
     4 0.00113,0.00113,0.00111,0.00111,0.00111,  !150
     5 0.00113,0.00107,0.00110,0.00109,0.00108,
     5 0.00106,0.00104,0.00102,0.00101,0.00100,  !160
     6 0.00100,0.00098,0.00102,0.00094,0.00101,
     6 0.00096,0.00092,0.00096,0.00096,0.00092,  !170
     7 0.00090,0.00095,0.00092,0.00090,0.00094,
     7 0.00085,0.00090,0.00090,0.00083,0.00084,  !180
     8 0.00085,0.00089,0.00082,0.00088,0.00083,
     8 0.00083,0.00078,0.00079,0.00082,0.00080,  !190
     9 0.00078,0.00077,0.00076,0.00076,0.00077,
     9 0.00075,0.00072,0.00076,0.00073,0.00074,  !200
     * 0.00077,0.00070,0.00068,0.00068,0.00073,
     * 0.00072,0.00070,0.00068,0.00067,0.00068,  !210
     1 0.00067,0.00067,0.00067,0.00064,0.00065,
     1 0.00067,0.00066,0.00060,0.00065,0.00060,  !220
     2 0.00060,0.00060,0.00060,0.00063,0.00057,
     2 0.00055,0.00054,0.00058,0.00053,0.00056,  !230
     3 0.00056,0.00054,0.00056,0.00051,0.00049,
     3 0.00049,0.00049,0.00048,0.00045,0.00046,  !240
     4 0.00049,0.00047,0.00044,0.00045,0.00042,
     4 0.00042,0.00040,0.00037,0.00034,0.00031,  !250
     * 500*0.0/
C  THIS IS THE POSITRON T RACK LENGTH FOR A 250 GEV POSITRON
C  BEAM INCIDENT ON 0.6 RL OF COPPER
      REAL ETL(250)/
     * 0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,
     1 0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,
     2 0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,
     3 0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,
     4 0.,0.,0.,0.0019,0.0019, .0019,.0018,.0018,.0018,.0018,            !50
     5 .0018,.0018,.0018,.0018,.0018, .0018,.0018,.0017,.0017,.0017,   !60
     6 .0017,.0017,.0017,.0016,.0016, .0016,.0016,.0017,.0017,.0016,   !70
     7 .0016,.0016,.0016,.0016,.0016, .0016,.0016,.0016,.0016,.0016,
     8 .0016,.0016,.0016,.0016,.0016, .0016,.0016,.0016,.0016,.0016,
     9 .0016,.0016,.0016,.0016,.0016, .0016,.0016,.0016,.0016,.0016,
     1 .0016,.0016,.0016,.0016,.0016, .0016,.0016,.0016,.0016,.0016,   !110
     1 .0016,.0016,.0016,.0016,.0016, .0016,.0016,.0016,.0017,.0017,   !120
     2 .0017,.0017,.0017,.0017,.0018, .0018,.0018,.0018,.0018,.0018,   !130
     3 .0018,.0018,.0018,.0018,.0018, .0018,.0018,.0018,.0018,.0018,
     4 .0018,.0019,.0019,.0019,.0019, .0019,.0019,.0019,.0019,.0019,   !150
     5 .0019,.0019,.0020,.0020,.0020, .0020,.0020,.0020,.0020,.0020,
     6 .0020,.0021,.0021,.0021,.0022, .0022,.0022,.0022,.0022,.0023,   !170
     7 .0023,.0023,.0023,.0023,.0023, .0024,.0024,.0024,.0024,.0024,   !180
     8 .0025,.0025,.0025,.0025,.0025, .0025,.0025,.0026,.0026,.0026,
     9 .0027,.0027,.0027,.0027,.0028, .0028,.0028,.0029,.0029,.0030,   !200
     2 .0030,.0030,.0030,.0031,.0031, .0032,.0032,.0032,.0033,.0033,
     1 .0035,.0036,.0037,.0037,.0038, .0038,.0038,.0039,.0040,.0040,   !220
     2 .0041,.0043,.0043,.0044,.0045, .0046,.0047,.0049,.0051,.0051,   !230
     3 .0053,.0056,.0057,.0058,.0062, .0063,.0065,.0069,.0072,.0077,
     4 .0081,.0085,.0092,.0099,.0110, .0121,.0139,.0168,.0167,.2280/   !250
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
      COMMON/IFLAG/IRUN,POSITRON,BH
      LOGICAL IRUN,POSITRON,BH
      LOGICAL THETABH
C
C  THE REFERENCE FOR THE EQUATIONS IN THIS SUBROUTINE IS Y. TSAI,
C  REV.MOD.PHYS., VOL.46, NO.4, OCTOBER 1974, P.815
C          INITIALIZE EVERYTHING
C  MUON MASS AND ELECTRON MASS
       XMU=105.67E-3
        XME=.511E-3
C
C  USEFUL CONSTANTS
        PI=3.14159265
        TWOPI=2.*3.14159265
        ALPHA=1./137.035999
C
C  ZTGT,ATGT ARE THE ATOMIC NUMBER AND WEIGHT OF THE TARGET
C  RLTGT IS THE TARGET RADIATION LENGTH IN CM
C  TGTDEN IS THE TARGET DENSITY IN GM/CM**3
C CARBON
C       ZTGT=6.
C       ATGT=12.01
C       RLTGT=18.8
C       TGTDEN=2.265
C COPPER
        ZTGT=29.
        ATGT=63.54
        RLTGT=1.43
        TGTDEN=8.96
C TUNGSTEN
C       ZTGT=74.
C       ATGT=183.85
C       RLTGT=0.35
C       TGTDEN=19.3
C TITANUIM
C       ZTGT=22.
C       ATGT=47.867
C       RLTGT=3.56
C       TGTDEN=4.54
C  BARN IS THE VALUE OF (HBAR*C)**2 IN GEV**2-CM**2                     BCK00320
        BARN=0.389386E-27                                               BCK00330
C  CSIGML IS THE VALUE OF THE CONSTANT FOR THE MU PR X-SECTION          BCK00350
        CSIGMU=BARN*(2.*ALPHA**3/XMU**2)                                BCK00360
C
C  FAZ IS THE COULOMB CORRECTION FACTOR
C
C  ZSCALE IS THE SCALED NUCLEAR CHARGE
        ZSCALE=(ALPHA*ZTGT)**2
C  THIS IS EQN. 3.3
        FAZ=1.202*ZSCALE-1.0369*ZSCALE**2+1.008*ZSCALE**3/(1.+ZSCALE)
C
C  D IS A PARAMETER IN THE NUCLEAR FORM FACTOR (HAS UNITS OF GEV**2)
        D=0.164*ATGT**(-2./3.)
C                                                                       BCK00430
C  THE NUCLEAR LUMOSITY IS THE PRODUCT OF SEVERAL FACTORS,              BCK00440
C  AND AVAGADRO'S NUMBER OVER THE MASS NUMBER                           BCK00520
        ALUM=TGTDEN*6.02E23/ATGT                                        BCK00530
C
C
C  ZERO THE TOTAL WEIGHTS                                               BCK00880
        WEIMUBH=0.
        WEIMUP=0.
        SIGMA_TOT=0.
        DO 200 I=1,750
        DO 200 J=1,70
        P_THETA_DIST(I,J)=0.
200     CONTINUE
        DO 205 I=1,750
	XTL(I)=GTL(I)
205     CONTINUE
        DO 206 I=1,250
	YTL(I)=ETL(I)
206     CONTINUE		
C
C  CALCULATE THE EXPECTED NUMBER OF EVENTS FOR A SPECTRUM OF
C  PHOTON ENERGIES
C  LOOP OVER ALL PHOTON ENERGIES
C
C     DON'T US  CLEMENT-KESSLER APPROX. BECAUSE PHOTON TRACK LENGTH
C     FOR 0.6 RL ABOVE.  THE UNITS OF
C     GTL ARE CM/GEV.
C
        IBEAM=ENER
        DELE=1.
C  TEST FOR A BETHE-HEITLER RUN
        IF(.NOT.BH) GO TO 40000
C
C  GENER IS THE PHOTON ENERGY
C  GLUM IS THE PHOTON-NUCLEUS LUMINOSITY FOR THE ENERGY BIN
C  CALCULATE THE NUMERATOR OF THE TRACK LENGTH EXPRESSION SINCE
C  IT ONLY DEPENDS ON THE BEAM ENERGY
        TOP=.964*RLTGT/ENER
C
C FIRST NORMALIZE THE PHOTON TRACK LENGTH TO THE BEAM ENERGY
C FOR THIS RUN.
      DO 10000 IP=1,IBEAM
      GENER=(IP-0.5)
      IF(IBEAM.EQ.250) GO TO 85
       R=250./ENER
       DO 80 I=1,IBEAM-2
       INDEX250=R*I
       XTL(I)=R*GTL(INDEX250)
80    CONTINUE
       XTL(IBEAM-1)=GTL(249)
       XTL(IBEAM)=GTL(250)
C
85    CONTINUE
        GLUM=ALUM*XTL(IP)
C	PRINT 86, IP,GTL(IP),GLUM
86      FORMAT(I10,2E10.5)	
C  FIND THE MUON MOMENTA UP TO (GAMMA ENERGY - .5) FOR THIS BIN
        NMU=IP-1
        DO 10000 IMU=1,NMU
        PMU=DELE*(IMU-.5)
        IF(PMU.LT.PMIN) GO TO 10000
C
C  DEFINE SOME SCALED VARIABLES
        V=PMU/GENER
C
C  DO A SIMPSON'S RULE INTEGRATION OVER THE VARIABLE XL
C  (XL=(PMU*THETA/XMU)**2)
C  WE WILL ACTUALLY USE SQRT(XL), SO WE HAVE TO MULTIPLY THE
C  INTEGRAND BY 2*SQRT(XL)
        XLOW=0.05
        XSTEP=0.10
        NSTEP=70
C  XSUM IS THE INTEGRAL
        XSUM=0.
C
        DO 500 JSTEP=1,NSTEP
        XL=(XLOW+(JSTEP-1)*XSTEP)**2
C
C  CALCULATE THE INTEGRAND
        TMIN=(XMU**2*(1.+XL)/(2.*GENER*V*(1.-V)))**2
        B=TMIN/D
        C=XMU**2*(1.+XL)**2/D
C
C  XFUNC IS THE INTEGRAL OF THE NUCLEAR FORM FACTOR OVER T
C  THIS IS EQN. 3.76
        XFUNC=ZTGT**2*((1.+2.*B)*LOG((1.+1./B)/(1.+1./C))
     *                 -(1.-B/C)*(1.+2.*C)/(1.+C))
C
C  THIS IS EQN. 3.7
C  XINT IS THE INTEGRAND
        XINT=((2.*V*(V-1.)+1.)/(1.+XL)**2+4.*XL*V*(1.-V)/(1.+XL)**4)
     *       *(XFUNC-2.*ZTGT**2*FAZ)
C
C  DETERMINE THE COEFFICIENT OF THE INTEGRAND (ACCORDING TO SIMPSON'S
C  RULE)
C       IF(JSTEP.EQ.1.OR.JSTEP.EQ.NSTEP) THEN
C         COEFF=1.0
C       ELSE
C         COEFF=4.0
C         IF((JSTEP/2)*2.NE.JSTEP) COEFF=2.0
C       ENDIF
C
C  SUM THE INTEGRAND
C       XSUM=XSUM+COEFF*XINT
C500    CONTINUE
C  NOW MULTIPLY BY THE X-SECTION NORMALIZATION AND THE BIN WIDTH
C       XSECT=CSIGMU*XSTEP/3.*XSUM/GENER
        XSECT=CSIGMU*XSTEP*XINT/GENER
C
C
C  XSECT IS THE DIFFERENTIAL X-SECTION FOR THIS MOMENTUM BIN PMU
C  AND THIS PHOTON ENERGY.  NOW MULTIPLY BY THE BIN WIDTH IN PMU
C  AND THE PHOTON LUMINOSITY TO GET THE NUMBER EVENTS IN THE PMU BIN
C  AND MULTIPLY BY 2 FOR TWO CHARGES
C
        XEVTS=XSECT*DELE*GLUM*2.*2.*SQRT(XL)
C
C  INCREMENT THE NUMBER OF EVENTS IN THIS BIN AND
C  SUM THE TOTAL NUMBER OF EVENTS GENERATED
C  THE WAY THE BINNING IS DONE, THE LOW MOMENTUM CUTOFF IS
C  P=1.0.  THAT MEANS P_THETA_DIST(1,THETA) IS ALWAYS ZERO.
C  P_THETA_DIST(2,THETA) APPLIES TO THE MOMENTUM BIN 1.< P <2.
      IF(XEVTS.GT.0.) THEN
        P_THETA_DIST(IMU,JSTEP)= P_THETA_DIST(IMU,JSTEP) + XEVTS
        WEIMUBH=WEIMUBH+XEVTS
      END IF
 500  CONTINUE
10000 CONTINUE
C
40000 CONTINUE
      SIGMA_BH=WEIMUBH/(ALUM*RLTGT)
      PRINT 10001, WEIMUBH,SIGMA_BH
10001 FORMAT('  WEIMUBH=',E10.3,'  SIGMA_BH=',E10.4)
C TEST FOR A POSITRON RUN
      IF(.NOT.POSITRON) GO TO 30000
C IF POSITRONS, COMPUTE THE SPECTRUM FROM DIRECT ANNIHILATION
C
C FIRST NORMALIZE THE POSITRON TRACK LENGTH TO THE BEAM ENERGY
C FOR THIS RUN.
C
      IF(IBEAM.EQ.250) GO TO 75
      R=250./ENER
C      PRINT 5555, IBEAM,R
5555  FORMAT('  IBEAM=',I10,'  R=',E10.4)
      DO 70 I=40,IBEAM-2
      INDEX250=R*I
C      PRINT 5557, I,ETL(I)
5557  FORMAT(' I=',I5,' ETL(I)=',E10.5)
      YTL(I)=R*ETL(INDEX250)
C      PRINT 5556, I,INDEX250,ETL(INDEX250),YTL(I)
5556  FORMAT(' I=',I5,' INDEX250=',I5,'  YTL(INDEX250)=',E10.5,
     1'  YTL(I)=',E10.5)
70    CONTINUE
      YTL(IBEAM-1)=ETL(249)
      YTL(IBEAM)=ETL(250)
C
75    CONTINUE
C  RECALCULATE ALUM TO ACCOUNT FOR THE NUMBER OF ELECTRONS IN THE
C  MATERIAL
      ALUM=TGTDEN*6.02E23*ZTGT/ATGT
C  DEFINE A FACTOR, RTL, TO CONVERT ETL FROM TITANIUM TO OTHER
C  MATERIALS.  IT IS THE RATIO OF THE RADIATION LENGTHS
C  IN THE FOLLOWING, IP IS THE POSITRON ENERGY IN THE SHOWER
C     RTL=.01*RLTGT/3.56
C PME IS THE LAB BEAM ENERGY
C W IS TOTAL ENERGY IN THE COM
C GAMMACML IS GAMMA OF THE COM IN THE LAB
C BETACML IS THE BETA OF GAMMACML. IT VERY CLOSE TO 1.
C ECM IS THE TOTAL ENERGY OF EACH MUON IN THE COM
C BETACM IS BETA OF EACH MUON IN THE COM
C PCM IS THE MOMENTUM OF THE BACK-TO-BACK MUONS IN THE CM
C TLAB1 AND TLAB2 ARE THE  KINETIC ENERGIES OF THE MUONS IN THE LAB
C THETALAB1 AND THETALAB2 ARE THE ANGLES OF THE MUONS IN THE LAB
      DO 20 IP=44,IBEAM
C     GLUM=ALUM*ETL(IP)*RTL
C DON'T USE RTL IN THIS VERSION BECAUSE HAVE THE ACTUAL COPPER TL
      GLUM=ALUM*YTL(IP)
      PME=IP
      W=SQRT(2.*PME*XME)
      GAMMACML=PME/W
      BETACML=SQRT(GAMMACML**2 -1.)/GAMMACML
      ECM=0.5*W
      BETACM=(SQRT(W**2-4.*(XMU**2)))/W
      PCM=ECM*BETACM
      X_CORR=PI*ALPHA*SQRT(1.-BETACM**2)/BETACM
      SSS=X_CORR/(1.-EXP(-X_CORR))
      TMAX=GAMMACML*(ECM+BETACML*PCM)-XMU
      TMIN=GAMMACML*(ECM-BETACML*PCM)-XMU
      THETAMAX(IP)=BETACM/(GAMMACML*BETACML)
C     WRITE(6,30001) W,GAMMACML,BETACML,BETACM,ECM,PCM,THETAMAX(IP)
30001 FORMAT(T2,'   W=',F7.5,'   GAMMACML=',F9.5,'  BETACML=',F10.8,
     *' BETACM=',F7.5,' ECM=',F7.5,' PCM=',F7.5,' THETAMAX(IP)=',F7.5)
C     WRITE(6,30002) TMAX,TMIN,X_CORR,SSS
30002 FORMAT(T2,' TMAX=',F10.5,' TMIN=',F10.5,' X_CORR=',F7.5,
     *' SSS=',F7.5)
C DCOSTH IS THE COSINE THETA CHANGE IN THE CENTER OF MASS WHICH
C CORRESPONDS TO A 1 GEV/C CHANGE IN LAB MOMENTUM.
      DCOSTH=1./(GAMMACML*BETACML*PCM)
      C=8.168E-33/ECM**2
C NBIN IS THE NUMBER OF BINS FROM THETA= 0 TO PI.
      NBIN=2./DCOSTH
      COSTH=1.-DCOSTH/2.
      SINTH=SQRT(1.-COSTH**2)
      TLAB0=GAMMACML*(ECM+BETACML*PCM*1.)-XMU         !11/24/13
C     WRITE(6,30004) NBIN,COSTH,SINTH,DCOSTH,ECM,C,THETAMAX(IP),
C    *TLAB0
30004 FORMAT(T2,'  NBIN=',I3,'  COSTH=',F8.5,'  SINTH=',F8.5,
     *' DCOSTH=',F8.5,' ECM=',F8.5,
     *' C=',E10.5,' THETAMAX(IP)=',F9.6,' TLAB0=',F5.1)  !11/24/13
C NOW LOOP OVER THE BINS IN THETA FOR THIS ENERGY POSITRON
      DO 10 N=1,NBIN
      TLAB=GAMMACML*(ECM+BETACML*PCM*COSTH)-XMU
      TLAB1=GAMMACML*(ECM+BETACML*PCM*COSTH_TEMP)-XMU
      NP=TLAB
      IF(NP.LT.PMIN) GO TO 12
      THETALAB=(BETACM*SINTH)/(GAMMACML*(BETACML+BETACM*COSTH))
      THETAMAX(NP)=THETALAB
C NOW NORMALIZE TO SAME THETA STEPS USED IN BETHE-HEITLER
      THETA=THETALAB/(0.1*XMU/TLAB)
      ITHETA=THETA
      IF(ITHETA.EQ.0) ITHETA=1
      IF(ITHETA.GT.70) ITHETA=70
      DSIGMA=((3.89379E-28*ALPHA**2*TWOPI)/(4.*W**2))*BETACM*SSS*
     *((1.+COSTH**2+(1.-BETACM**2)*SINTH**2))*DCOSTH
C     WRITE(6,30005) NP,TLAB,THETALAB,THETA,ITHETA,COSTH,DSIGMA,TLAB1
30005 FORMAT(T2,'  NP=',I4,'  TLAB=',F5.1,'  THETALAB=',F8.5,
     *'  THETA=',F9.6,
     *'  ITHETA=',I3,'  COSTH=',F6.2,'  DSIGMA=',E10.3,' TLAB1=',F5.1)
C MULTIPLY BY 2. FOR TWO MUONS
      XEVTS=DSIGMA*DELE*GLUM*2.
      P_THETA_DIST(NP,ITHETA)=P_THETA_DIST(NP,ITHETA)+XEVTS
      SIGMA(NP)=SIGMA(NP)+DSIGMA
      WEIMUP=WEIMUP+XEVTS
C     WRITE(6,30010)  P_THETA_DIST(NP,ITHETA),SIGMA(NP),WEIMUP
30010 FORMAT(T2,'   P_THETA_DIST=',E10.5,'   SIGMA(NP)=',E10.5,
     *'   WEIMUP=',E10.5)
12    CONTINUE
      COSTH=COSTH-DCOSTH
      IF(ABS(COSTH).GT.1.0) GO TO 25
      SINTH=SQRT(1.-COSTH**2)
25    CONTINUE
      SIGMA_TOT=SIGMA_TOT+SIGMA(NP)
10    CONTINUE
C     WRITE(6,30009) PME,IP,NP,SIGMA_TOT                         !CHANGE
30009 FORMAT(T2,' END NBIN LOOP',' PME=',F10.5,' IP=',I5,       !CHANGE
     *'  NP=',I5,'  SIGMA_TOT=',E10.5)
20    CONTINUE
      SIGMA_P=WEIMUP/(ALUM*RLTGT)
      PRINT 10002, WEIMUP,SIGMA_P
10002 FORMAT('  WEIMUP=',E10.3,'  SIGMA_P=',E10.4)
C
30000 CONTINUE
        WEIMU=WEIMUP+WEIMUBH
        WRITE (6,20000) PMIN,WEIMU,ENER,SIGMA_TOT
20000   FORMAT(T2,'TOTAL MUS ABOVE',F7.2,'= ',E20.7,
     1 ' FOR EBEAM=',F7.2,' ANNIH. SIGMA_TOT=',E10.4)
C IF IRUN IS FALSE, PRINT THE PRODUCTION QUANTITIES FOR E=EBEAM
C OTHERWISE SKIP PRINTING
        IF(IRUN) GO TO 998
C  PRINT OUT VALUES
        PRINT 103
103     FORMAT(T2,'EGAMMA BIN',T15,'CM OF PHOTON AND POSITRON PATH LENGT
     1H')
        DO 110 I=1,IBEAM
        E=DELE*(I-.5)
        PRINT 20400, E, GTL(I), ETL(I)
110     CONTINUE
        PRINT 20100
20100   FORMAT(T2,'ENERGY BIN',T15,'NUMBER OF MUS/ELECTRON')
        DO 20300 I=1,IBEAM
        E=DELE*(I-.5)
        PRINT 20200, E
20200   FORMAT(T2,F6.2,T15,E10.3)
20400   FORMAT(T2,F6.2,2F10.7)
        PRINT 20201, (P_THETA_DIST(I,J),J=1,70)
C       WRITE (22,20201) (P_THETA_DIST(I,J),J=1,70)
20201   FORMAT(T2,5E10.3)
20300   CONTINUE
C INTEGRATE OVER THETA FOR EACH ENERGY BIN
      PRINT 104
 104  FORMAT(T2,'ENERGY BIN',T15,'INTEGRAL NUMBER OF MUS/ELECTRON')
      DO 8 IP = 1,IBEAM
        YIELD=0.
        E=DELE*(IP-.5)
      DO 9 ITHETA = 1,70
        YIELD=YIELD + P_THETA_DIST(IP,ITHETA)
    9 CONTINUE
        PRINT 20200, E,YIELD
    8 CONTINUE
C
998     CONTINUE
C     NOMALIZE AND INTEGRATE
C
      SUM = 0.
      DO 3 IP=1,IBEAM
      DO 3 ITHETA = 1,70
        SUM = SUM + P_THETA_DIST(IP,ITHETA)
    3 CONTINUE
      IF (NORTH) THEN
        WRITE (6,4) SUM
      ELSE
        WRITE (6,7) SUM
      END IF
    4 FORMAT('1 THE NUMBER OF MUONS OVER 1 GEV PER INCIDENT ',
     1 ' ELECTRON IS ',E10.3)
    7 FORMAT('1 THE NUMBER OF MUONS OVER 1 GEV PER INCIDENT ',
     1 ' POSITRON IS ',E10.3)
      XNORM = SUM
      SUM = 0.
      DO 5 IP = 1,IBEAM
      DO 5 ITHETA = 1,70
        SUM = SUM + P_THETA_DIST(IP,ITHETA)
        P_THETA_DIST(IP,ITHETA) = SUM/XNORM
    5 CONTINUE
      IF(IRUN) GO TO 999
        PRINT 10009, XNORM
10009   FORMAT('  XNORM=',E10.3)
        PRINT 10100
10100   FORMAT(T2,'ENERGY BIN',T15,'INTEGRAL SPECTRUM     ')
        DO 10300 I=1,IBEAM
        E=DELE*(I-.5)
        PRINT 20200, E
        PRINT 20201, (P_THETA_DIST(I,J),J=1,70)
C       WRITE (22,20201) (P_THETA_DIST(I,J),J=1,70)
10300   CONTINUE
C
  999 CONTINUE
      RETURN
      END
C
      SUBROUTINE TRANSPORT(ZM)                                      !LK
C
C     ROUTINE TO TRANSPORT A TRACK ZM                               !LK
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
C
C     X(INDEXC)=X(INDEXC)+100.*ZM*(XPRIME(INDEXC)-XAXISP(INDEXC))   !LK
C     X(INDEXC)=X(INDEXC)+100.*ZM*XPRIME(INDEXC)+XAXIS(INDEXC)    !LK
      X(INDEXC) = X(INDEXC) + 100.*ZM*XPRIME(INDEXC)                !LK
      Y(INDEXC) = Y(INDEXC) + 100.*ZM*YPRIME(INDEXC)                !LK
      Z(INDEXC) = Z(INDEXC) - ZM                                    !LK
      X0(INDEXC) = X0(INDEXC) + 100.*ZM*X0PRIME(INDEXC)                !LK
C     X0(INDEXC) = X(INDEXC)+XAXIS(INDEXC)
      Y0(INDEXC) = Y(INDEXC)                                          !LK
C     PRINT 501, X(INDEXC),XPRIME(INDEXC),X0(INDEXC),X0PRIME(INDEXC)
501   FORMAT(' TRANSPORT X=',F9.3,'  XPRIME=',F11.7,' X0=',F9.3,
     1'  X0PRIME=',F11.7)
C
      RETURN
      END
C
C
      SUBROUTINE TUNNEL
C
C     ROUTINE TO HANDLE A ROUND OR SQUARE (RECTANGULAR) TUNNEL
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/AXIS/X0PRIME(10000),Y0PRIME(10000),X0(10000),
     1Y0(10000),XAXISP(10000),XAXIS(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      COMMON/XTUNNEL/D0,D1,RTUNNEL,XBEAM,XREF,XWALLLT(10000),
     1XOFFSET(10000),YOFFSET,YFLOOR,XFLOOR,XWALLRT(10000),TWALL,
     2XWALLLT1(10000),XWALLRT1(10000),AXISLE(10000),AXISD(10000)
      LOGICAL LTUNNEL
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
C
      IF(LTUNNEL) GO TO 10
C THE NORTH TUNNEL IS ROUND, THE SOUTH TUNNEL IS SQUARE
C THIS SECTION IS UP TO THE TRIANGULAR NOTCH REGION
      IF(NORTH) THEN
        IF(INDEXC.GE.   1) THEN
C CHECK RECTANGULAR CROSS SECTION FIRST
C CHECK VERTICAL FIRST
          IF(Y0(INDEXC).GT.(RTUNNEL+D1+TWALL)
     1      .OR.Y0(INDEXC).LT.-1.*(YFLOOR+TWALL)) THEN
C DEBUG
C             WRITE(6,80)
 80           FORMAT('80')
               CALL GRANITE(1.*IZ)
               GO TO 10
          END IF
          IF(Y(INDEXC).GT.(RTUNNEL+D1)
     1      .OR.Y(INDEXC).LT.-1.*YFLOOR) THEN
C DEBUG
C             WRITE(6,81)
 81           FORMAT('81')
               CALL CONCRETE(1.*IZ)
               GO TO 10
          END IF
C NOW HORIZONTAL
          IF (X0(INDEXC).LT.(XWALLLT(INDEXC)-TWALL).OR.
     1        X0(INDEXC).GT.(XWALLRT(INDEXC)+TWALL)) THEN
C DEBUG
C             WRITE(6,82)X0(INDEXC),XWALLLT(INDEXC)
 82           FORMAT('82',2F12.4)
C             CALL LIGHT_SANDSTONE(1.*IZ)
              CALL GRANITE(1.*IZ)
               GO TO 10
          END IF
          IF (X0(INDEXC).LT.XWALLLT(INDEXC).OR.
     1        X0(INDEXC).GT.XWALLRT(INDEXC)) THEN
C             CALL LIGHT_CONCRETE(1.*IZ)
              CALL CONCRETE(1.*IZ)
               GO TO 10
          END IF
C NOW CHECK FOR PARTICLE IN ROUNDED CORNERS
          CLX=XWALLLT(INDEXC)+RTUNNEL
          CRX=XWALLRT(INDEXC)-RTUNNEL
          IF (X0(INDEXC).LT.CLX.AND.RTUNNEL.LT.
     1      SQRT((X0(INDEXC)-CLX)**2+(Y0(INDEXC)-YOFFSET)**2)) THEN
              CALL CONCRETE(1.*IZ)
               GO TO 10
          END IF
          IF (X0(INDEXC).GT.CRX.AND.RTUNNEL.LT.
     1        SQRT((X0(INDEXC)-CRX)**2+(Y0(INDEXC)-YOFFSET)**2)) THEN
              CALL CONCRETE(1.*IZ)
               GO TO 10
          END IF
C...+....1....+....2....+....3....+....4....+....5....+....6....+....7."
        END IF
      ELSE
C OR SOUTH TUNNEL (RECTANGULAR)
C CHECK VERTICAL FIRST
        IF(INDEXC.GE.   1) THEN
          IF(Y(INDEXC).GT.(RTUNNEL+D1+TWALL)
     1    .OR.Y(INDEXC).LT.-1.*(YFLOOR+TWALL)) THEN
            CALL GRANITE(1.*IZ)
            GO TO 10
          END IF
          IF(Y(INDEXC).GT.(RTUNNEL+D1).OR.Y(INDEXC).LT.
     1    -YFLOOR) THEN
            CALL CONCRETE(1.*IZ)                                     !LK
            GO TO 10
          END IF
        END IF
C DONE WITH VERTICAL
C NOW CHECK HORIZONTAL FAR LEFT AND FAR RIGHT UP TO Z=380
        IF(INDEXC.GE. 380) THEN
          IF(X0(INDEXC).LT.(XWALLLT(INDEXC)-TWALL).OR.X0(INDEXC)
     1    .GT.(XWALLRT1(INDEXC)+TWALL)) THEN
            CALL GRANITE(1.*IZ)
            GO TO 10
          END IF
          IF(X0(INDEXC).LT.XWALLLT(INDEXC).OR.X0(INDEXC).GT.
     1    XWALLRT1(INDEXC)) THEN
            CALL CONCRETE(1.*IZ)                                     !LK
            GO TO 10
          END IF
C NOW CHECK SHIELD WALL SEPARATING SERVICE TUNNEL
          IF(X0(INDEXC).LT.XWALLLT1(INDEXC).AND.X0(INDEXC).GT.
     1    XWALLRT(INDEXC)) THEN
            CALL CONCRETE(1.*IZ)                                     !LK
            GO TO 10
          END IF
        END IF
C DONE WITH Z UP TO 380
C NOW Z 379 TO 1
        IF(INDEXC.GE.   1) THEN
          IF(X0(INDEXC).LT.(XWALLLT(INDEXC)-TWALL).OR.X0(INDEXC)
     1    .GT.(XWALLRT(INDEXC)+TWALL)) THEN
            CALL GRANITE(1.*IZ)
            GO TO 10
          END IF
          IF(X0(INDEXC).LT.XWALLLT(INDEXC).OR.X0(INDEXC)
     1    .GT.XWALLRT(INDEXC)) THEN
            CALL CONCRETE(1.*IZ)
            GO TO 10
          END IF
        END IF
      END IF
C
10    CONTINUE
C         WRITE(6,107) X0(INDEXC),X(INDEXC),Y0(INDEXC),Y(INDEXC),
C    1 X0PRIME(INDEXC),XPRIME(INDEXC),P(INDEXC),INDEXC
 107      FORMAT('107',4F8.1,2F10.6,F10.2,I10)
      RETURN
      END
C
      SUBROUTINE URANIUM(XMETER)                                    !LK
      CALL PLOSS(3,1894.9*XMETER)                                   !LK
      CALL SCATT(312.6*XMETER)                                      !LK
C
      RETURN
      END
C
      SUBROUTINE WAVE_GUIDE(R)
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
      IF(R.LT.0.81) THEN                                          !LK
        CALL COPPER(0.4*ISTEP)                                    !LK
      ELSE
        CALL COPPER(1.*ISTEP)                                     !LK
      END IF
      RETURN
      END
C
      SUBROUTINE WIDE_TUNNEL
C
C     ROUTINE TO HANDLE WIDE TUNNEL
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTUNNEL/LTUNNEL
      LOGICAL LTUNNEL
      COMMON/NFLAG/NORTH
      LOGICAL NORTH
C
C
      RETURN
      END
C
      SUBROUTINE FINAL_FOCUS(LFINISH)
C
C     ROUTINE TO SWIM MUONS THROUGH THE FINAL FOCUS
C
      LOGICAL LFINISH
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTOROID/LTOROID(20),ITOROID_TYPE(20),ITOROID_BEGIN(20),
     1 ITOROID_LENGTH(20),TOROIDX(20),TOROID_POLARITY(20),NTOR
      LOGICAL LTOROID
      COMMON/BL/BEAM_LINE_LABEL(10000)
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
      COMMON/PASS/IPASS
      COMMON/SWITCH/ISWPEN,ISWSTR,ISW_WG,ISW_S,ISW_Q,ISW_SQ,ISW_X,ISW_Y,
     1       ISW_QT
      CHARACTER*8 BEAM_LINE_LABEL
C
C     BEAM_LINE CODES:
C
C     0            NOTHING
C     1            TUNNEL
C     2            GIRDER
C     3            WIDE TUNNEL
C     4,5,6,7,8,9  SHIELDING WALLS 1,2,3,4,5,6                      !LK
C     10 + IMAG    BEND MAGNET
C     20 + IMAG    QUADRUPOLE
C
      CHARACTER*8 BLL(65)/
     * 'TUNNEL  ','        ','        ','        ','        ',
     1 '        ','        ','        ','        ','        ',
     2 'BCX2,1  ','B5      ','B4      ','B2      ','B1      ',
     3 'B1      ','B1      ','        ','        ','        ',
     4 'QC1     ','QC2     ','QC3     ','QC4     ','QB1/QB3 ',
     5 'QB2     ','QM6     ','QM5     ','QM4     ','QM3     ',
     6 'QM2     ','QM1     ','QA1/QA3 ','QA2     ','        ',
     7 '        ','        ','        ','        ','        ',
     8 '        ','        ','        ','LQF     ','LQD     ',
     9 '        ','        ','        ','        ','        ',
     9 '        ','        ','        ','        ','        ',
     9 '        ','        ','        ','        ','        ',
     9 '        ','        ','        ','        ','        '/
      INTEGER BEAM_LINE_0(100)/
     *  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_1(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1,14,14,
     2 14,14, 1, 1, 1,  1, 1, 1, 1, 1,
     3 14,14,14,14, 1,  1, 1, 1, 1, 1,
     4  1, 1,14,14,14, 14, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1, 14,14,14,14, 1,
     6  1, 1, 1, 1, 1,  1, 1,14,14,14,
     7 14, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8 14,14,14,14, 1,  1, 1,65,65, 1,
     9  1, 1, 1, 1,13, 13,13,13, 1, 1/
      INTEGER BEAM_LINE_2(100)/
     *  1, 1, 1, 1, 1,  1,13,13,13,13,
     1  1, 1, 1, 1, 1, 64,64, 1, 1, 1,
     2  1,13,13,13,13,  1, 1, 1, 1, 1,
     3  1, 1, 1,13,13, 13,13, 1, 1, 1,
     4  1,63,63, 1, 1,  1, 1, 1,13,13,
     5 13,13, 1, 1, 1,  1, 1, 1, 1, 1,
     6 13,13,13,13, 1,  1, 1, 1, 1, 1,
     7  1, 1,13,13,13, 13, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1, 13,13,13,13, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1,13,13/
      INTEGER BEAM_LINE_3(100)/
     * 13,13, 1, 1, 1,  1, 1, 1, 1,13,
     1 13,13,13, 1, 1,  1, 1, 1, 1, 1,
     2  1,13,13,13,13,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1,62,62,  1, 1, 1, 1, 1,
     8 62,62, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1,61,61, 1, 1,  1, 1,61,61, 1/
      INTEGER BEAM_LINE_4(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1,12,
     1 12,12,12, 1, 1,  1, 1, 1, 1, 1,
     2  1,12,12,12,12,  1, 1, 1, 1, 1,
     3 12,12,12,12, 1,  1, 1, 1, 1, 1,
     4  1,59,59, 1, 1,  1, 1, 1,12,12,
     5 12,12, 1, 1, 1,  1, 1, 1, 1, 1,
     6 12,12,12,12, 1,  1, 1, 1, 1,60,
     7 60, 1, 1,60,60,  1, 1, 1, 1,12,
     8 12,12,12, 1, 1,  1, 1, 1, 1, 1,
     9  1,12,12,12,12,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_5(100)/
     * 59,59, 1, 1, 1,  1,12,12,12,12,
     1  1, 1, 1, 1, 1,  1, 1, 1,12,12,
     2 12,12, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1,12,12,12,12,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_6(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1,58, 58, 1, 1, 1, 1,
     5  1,58,58, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1,57,57, 1,  1, 1, 1, 1,57,
     7 57, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1,56,56,  1, 1, 1, 1, 1,
     9  1, 1, 1,55,55,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_7(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1 15,15,15,15,15,  1,15,15,15,54,
     2 54, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1,53,53, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1,52,52, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_8(100)/
     *  1, 1, 1, 1, 1, 51,51, 1, 1, 1,
     1  1, 1, 1, 1,50, 50, 1, 1, 1, 1,
     2  1, 1, 1,49,49,  1, 1, 1, 1, 1,
     3 11,11,11,11, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1,11,11, 11,11, 1, 1, 1,
     5 43, 4, 1, 1, 1,  1,11,11,11,11,
     6  1, 1, 1, 1, 1,  1, 1, 1,11,11,
     7 11,11, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1,11,11,11,11,  1, 1, 1, 1, 1,
     9  1, 1,11,11,11, 11, 1, 1, 1, 1/
      INTEGER BEAM_LINE_9(100)/
     *  1, 1, 1, 1, 1, 11,11,11,11, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1,11,11,11,11,  1, 1, 1, 1, 1,
     3  1, 1, 1,11,11, 11,11, 1, 1, 1,
     4  1, 1, 1, 1,11, 11,11,11, 1, 1,
     5  1, 1, 1, 1,11, 11,11,11, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1,11,11,11,
     7 11, 1, 1, 1, 1,  1, 1, 1, 1,11,
     8 11,11,11, 1, 1,  1, 1, 1, 1, 1,
     9  1,11,11,11,11,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_10(100)/
     *  1, 1, 1, 1,11, 11,11,11, 1, 1,
     1  1, 1,47, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1, 48, 1, 1, 1, 1,
     3  1, 1,48, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1, 47, 5, 1, 1, 1,
     5  1,11,11,11,11,  1, 1, 1, 1, 1,
     6  1, 1,11,11,11, 11, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1, 11,11,11,11, 1,
     8  1, 1, 1, 1, 1,  1, 1,11,11,11,
     9 11, 1, 1, 1, 1,  1, 1, 1, 1,11/
      INTEGER BEAM_LINE_11(100)/
     * 11,11,11, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1,11,11,11, 11, 1, 1, 1, 1,
     2  1, 1, 1, 1,11, 11,11,11, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1,11,11,11,
     4 11, 1, 1, 1, 1,  1, 1, 1, 1,11,
     5 11,11,11, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1,11,11,11, 11, 1, 1, 1, 1,
     7  1, 1, 1, 1,11, 11,11,11, 1, 1,
     8  1, 1, 1, 1, 1,  1,11,11,11,11,
     9  1, 1, 1, 1, 1,  1, 1, 1,11,11/
      INTEGER BEAM_LINE_12(100)/
     * 11,11, 1, 1, 1,  1,43, 1, 5, 1,
     1  1, 1,11,11,11, 11, 1, 1, 1, 1,
     2  1, 1, 1, 1,11, 11,11,11, 1, 1,
     3  1, 1, 1, 1, 1,  1, 4,46,46, 1,
     4  1, 5, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1,45,  5, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_13(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2 43,43, 5, 1, 1, 44,44, 1, 1, 1,
     3  1, 1, 4,44,44,  1, 1, 1,43,43,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1, 42, 5, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_14(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1,41,41,  1, 1, 1, 1, 4,
     2 41,41, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5 42, 5, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1, 43,43, 1, 1, 1/
      INTEGER BEAM_LINE_15(100)/
     *  1,44,44, 1, 1,  1, 1, 4,44,44,
     1  1, 1, 1,43,43,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6 42, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1,41,41,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_16(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_17(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_18(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_19(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_20(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE_21(100)/
     *  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     1  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     2  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     3  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     4  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     5  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     6  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     7  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     8  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,
     9  1, 1, 1, 1, 1,  1, 1, 1, 1, 1/
      INTEGER BEAM_LINE(2200)
      EQUIVALENCE(BEAM_LINE(  1),BEAM_LINE_0(1))
      EQUIVALENCE(BEAM_LINE(101),BEAM_LINE_1(1))
      EQUIVALENCE(BEAM_LINE(201),BEAM_LINE_2(1))
      EQUIVALENCE(BEAM_LINE(301),BEAM_LINE_3(1))
      EQUIVALENCE(BEAM_LINE(401),BEAM_LINE_4(1))
      EQUIVALENCE(BEAM_LINE(501),BEAM_LINE_5(1))
      EQUIVALENCE(BEAM_LINE(601),BEAM_LINE_6(1))
      EQUIVALENCE(BEAM_LINE(701),BEAM_LINE_7(1))
      EQUIVALENCE(BEAM_LINE(801),BEAM_LINE_8(1))
      EQUIVALENCE(BEAM_LINE(901),BEAM_LINE_9(1))
      EQUIVALENCE(BEAM_LINE(1001),BEAM_LINE_10(1))
      EQUIVALENCE(BEAM_LINE(1101),BEAM_LINE_11(1))
      EQUIVALENCE(BEAM_LINE(1201),BEAM_LINE_12(1))
      EQUIVALENCE(BEAM_LINE(1301),BEAM_LINE_13(1))
      EQUIVALENCE(BEAM_LINE(1401),BEAM_LINE_14(1))
      EQUIVALENCE(BEAM_LINE(1501),BEAM_LINE_15(1))
      EQUIVALENCE(BEAM_LINE(1601),BEAM_LINE_16(1))
      EQUIVALENCE(BEAM_LINE(1701),BEAM_LINE_17(1))
      EQUIVALENCE(BEAM_LINE(1801),BEAM_LINE_18(1))
      EQUIVALENCE(BEAM_LINE(1901),BEAM_LINE_19(1))
      EQUIVALENCE(BEAM_LINE(2001),BEAM_LINE_20(1))
      EQUIVALENCE(BEAM_LINE(2101),BEAM_LINE_21(1))
C
C     FIND POSITION IN Z AND ACT ON IT
C
C     IZ=ISTEP
C  THE TEST FOR KSTEP WAS RELOCATED TO MAIN
      IBL = BEAM_LINE(INDEXC)
      CALL TRANSPORT(IZ/2.)
C
C     IF (IBL.GE.1) THEN
C       BEAM_LINE_LABEL(INDEXC) = BLL(IBL)
C     ELSE
C       BEAM_LINE_LABEL(INDEXC) = BLL(1)
C     END IF
C
    2 CONTINUE
      IF(IBL.EQ.1) THEN
        CALL TUNNEL
      ELSE IF (IBL.GE.11.AND.IBL.LE.33) THEN
        IMAG = IBL - 10
        CALL BMAG(IMAG)
      ELSE IF (IBL.GE.41.AND.IBL.LE.120) THEN
        IMAG = IBL - 40
        CALL QUAD(IMAG)
      ELSE IF (IBL.EQ.2) THEN
        CALL GIRDER
      ELSE IF (IBL.EQ.3) THEN
        CALL WIDE_TUNNEL
      ELSE IF (IBL.EQ.4) THEN
        CALL ABSORBER
      ELSE IF (IBL.EQ.5) THEN
        CALL COLLIMATOR
      ELSE IF (IBL.EQ.6) THEN
        CALL CONCRETE_WALL
      ELSE IF (IBL.EQ.7) THEN
        CALL SHIELDING_WALL4
      ELSE IF (IBL.EQ.8) THEN
        CALL SHIELDING_WALL5
      ELSE IF (IBL.EQ.9) THEN
        CALL SHIELDING_WALL6
      END IF
C
C     CHECK FOR TOROIDS.
C     TYPES 1-10 ARE "SLAC TOROIDS", I.E.
C     A RECTANGULAR SHAPE.  TYPES 11-15 ARE "FERMI TOROIDS", I.E.
C     ROUND.
C     ITOROID_BEGIN IS THE INBOARD SIDE
C
      DO 1 I = 1,15
        IF (LTOROID(I).AND.INDEXC.GE.ITOROID_BEGIN(I).AND.
     1  INDEXC.LT.ITOROID_BEGIN(I) + ITOROID_LENGTH(I)) THEN
          IF(ITOROID_TYPE(I).LE.10) THEN
            CALL SLAC_TOROID(I,ITOROID_TYPE(I))
          ELSE
            CALL FERMI_TOROID(I,ITOROID_TYPE(I))
          END IF
        END IF
    1 CONTINUE
C
C     CHECK FOR RANGE OUT
C
C     IF (P(INDEXC).LT.0.011) THEN
      IF (P(INDEXC).LT.0.300) THEN
        LFINISH = .TRUE.
      ELSE
        LFINISH = .FALSE.
      END IF
      CALL TRANSPORT(IZ/2.)                                        !LK
      RETURN
      END
C
      SUBROUTINE ACCEL(LFINISH)
C
C     ROUTINE TO SWIM MUONS THROUGH THE ACCELERATOR
C
C     UNITS ARE INCHES AND GEV
      LOGICAL LFINISH
C
      COMMON/HISTORY/Z(10000),X(10000),
     1 Y(10000),XPRIME(10000),YPRIME(10000),P(10000)
      COMMON/JNDEX/INDEXC,INDEX0,ICHARGE,ISOURCE,IZ
      COMMON/CTOROID/LTOROID(20),ITOROID_TYPE(20),ITOROID_BEGIN(20),
     1 ITOROID_LENGTH(20),TOROIDX(20),TOROID_POLARITY(20),NTOR
      LOGICAL LTOROID
      COMMON/STEP/ISTEP,KSTEP,GRAD,LSTEP,ISOURCE_START,SOURCE_WEIGHT
      COMMON/TEMP/LS,LPOL,LC,QUAD_SPACING,QUAD_LENGTH,ACCEL_LENGTH,LQ
      COMMON/BEAM/EBEAM
C
      CALL TRANSPORT(ISTEP/2.)                                     !LK
C
C     ASSUME ACCELERATOR QUADS ARE SPACED EVERY QUAD_SPACING METERS !LK
C     AND THAT THE SOURCE IS JUST DOWNSTREAM FROM A QUAD.  COUNT
C     STEPS UNTIL LS REACHES A QUAD, THEN CALL QUAD
C
C INCREMENT LENGTH COUNTERS
      LC =LC+ISTEP
      LS=LS+ISTEP
C     PRINT 20, LC,LS,LQ,LPOL,QUAD_SPACING,QUAD_LENGTH
C20   FORMAT(4I10,2F10.5)
C IF THE MUON HAS REACHED A QUAD, CALL THE QUAD ROUTINE
      IF(LS.LT. QUAD_SPACING) THEN
        GO TO 1
      ELSE
        LQ=LQ+ISTEP
        IF(LPOL.EQ.1)  THEN
          CALL QUAD(24)
        ELSE
          CALL QUAD(25)
        END IF
      END IF
C IF MUON HAS NOT PASSED THE END OF THE QUAD, TRANSPORT ANOTHER
C HALF STEP
      IF(LQ.LT.QUAD_LENGTH) GO TO 2
C MUON HAS PASSED QUAD
C RESET LS AND LQ, CALCULATE NEW QUAD_SPACING AND QUAD_LENGTH, AND
C REVERSE QUAD POLARITY FLAG, THEN TRANSPORT ANOTHER HALF STEP
      DENOM=LC-LS
      NUM=LC
      QUAD_SPACING=QUAD_SPACING*SQRT(NUM/DENOM)
      QUAD_LENGTH=QUAD_LENGTH*SQRT(NUM/DENOM)
      LS=0
      LQ=0
      LPOL=LPOL*(-1)
      GO TO 2
1     CONTINUE
C BETWEEN QUADS, START ON AXIS AND WORK OUT
C THESE ARE THE DIMENSIONS OF AN X-BAND ACCELERATOR                 !LK
      R=SQRT(X(INDEXC)**2 + Y(INDEXC)**2)
      IF(R.LT.0.162) THEN                                           !LK
        P(INDEXC)=P(INDEXC) - GRAD*ICHARGE*ISTEP
      ELSE
        IF(R.LE.1.78) THEN                                          !LK
          CALL WAVE_GUIDE(R)
        ELSE
          CALL TUNNEL
        END IF
      END IF
C NOW CHECK FOR PRESENCE OF TOROIDS
C TOROIDS 17-20 ARE RESERVED FOR THE LINAC
      DO 100 I=17,20
        IF (LTOROID(I).AND.INDEXC.GE.ITOROID_BEGIN(I).AND.
     1   INDEXC.LT.ITOROID_BEGIN(I) + ITOROID_LENGTH(I)) THEN
          IF(ITOROID_TYPE(I).LE.10) THEN
            CALL SLAC_TOROID(I,ITOROID_TYPE(I))
          ELSE
            CALL FERMI_TOROID(I,ITOROID_TYPE(I))
          END IF
        END IF
  100     CONTINUE
2     CONTINUE
C     CHECK FOR RANGE OUT
C
      IF (P(INDEXC).LE.0.011) THEN
        LFINISH = .TRUE.
        RETURN
      ELSE
        LFINISH = .FALSE.
      END IF
      CALL TRANSPORT(ISTEP/2.)                                      !LK
      RETURN
      END
